// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StructureDetails.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StructureDetails.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swgemurpcserver {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* SWGEmuStructureItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWGEmuStructureItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallationItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallationItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarvesterItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarvesterItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactoryItemDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryItemDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStructureItemDetailsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStructureItemDetailsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStructureItemDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStructureItemDetailsResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SWGEmuStructureItemDetailsService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_StructureDetails_2eproto() {
  protobuf_AddDesc_StructureDetails_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StructureDetails.proto");
  GOOGLE_CHECK(file != NULL);
  SWGEmuStructureItemDetails_descriptor_ = file->message_type(0);
  static const int SWGEmuStructureItemDetails_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, appearance_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, owner_display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, owner_object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, world_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, world_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, world_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, decay_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, lot_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, template_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, portals_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, buildable_zones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, building_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, installation_details_),
  };
  SWGEmuStructureItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWGEmuStructureItemDetails_descriptor_,
      SWGEmuStructureItemDetails::default_instance_,
      SWGEmuStructureItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuStructureItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWGEmuStructureItemDetails));
  BuildingItemDetails_descriptor_ = file->message_type(1);
  static const int BuildingItemDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingItemDetails, contained_items_),
  };
  BuildingItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingItemDetails_descriptor_,
      BuildingItemDetails::default_instance_,
      BuildingItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingItemDetails));
  InstallationItemDetails_descriptor_ = file->message_type(2);
  static const int InstallationItemDetails_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, operating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, actual_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, max_hopper_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, harvester_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, factory_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, hopper_items_),
  };
  InstallationItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallationItemDetails_descriptor_,
      InstallationItemDetails::default_instance_,
      InstallationItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallationItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallationItemDetails));
  HarvesterItemDetails_descriptor_ = file->message_type(3);
  static const int HarvesterItemDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterItemDetails, extraction_rate_),
  };
  HarvesterItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarvesterItemDetails_descriptor_,
      HarvesterItemDetails::default_instance_,
      HarvesterItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarvesterItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarvesterItemDetails));
  FactoryItemDetails_descriptor_ = file->message_type(4);
  static const int FactoryItemDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryItemDetails, schematic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryItemDetails, ingredient_items_),
  };
  FactoryItemDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryItemDetails_descriptor_,
      FactoryItemDetails::default_instance_,
      FactoryItemDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryItemDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryItemDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryItemDetails));
  GetStructureItemDetailsRequest_descriptor_ = file->message_type(5);
  static const int GetStructureItemDetailsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsRequest, owner_object_id_),
  };
  GetStructureItemDetailsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStructureItemDetailsRequest_descriptor_,
      GetStructureItemDetailsRequest::default_instance_,
      GetStructureItemDetailsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStructureItemDetailsRequest));
  GetStructureItemDetailsResponse_descriptor_ = file->message_type(6);
  static const int GetStructureItemDetailsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsResponse, structures_),
  };
  GetStructureItemDetailsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStructureItemDetailsResponse_descriptor_,
      GetStructureItemDetailsResponse::default_instance_,
      GetStructureItemDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStructureItemDetailsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStructureItemDetailsResponse));
  SWGEmuStructureItemDetailsService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StructureDetails_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWGEmuStructureItemDetails_descriptor_, &SWGEmuStructureItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingItemDetails_descriptor_, &BuildingItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallationItemDetails_descriptor_, &InstallationItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarvesterItemDetails_descriptor_, &HarvesterItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryItemDetails_descriptor_, &FactoryItemDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStructureItemDetailsRequest_descriptor_, &GetStructureItemDetailsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStructureItemDetailsResponse_descriptor_, &GetStructureItemDetailsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StructureDetails_2eproto() {
  delete SWGEmuStructureItemDetails::default_instance_;
  delete SWGEmuStructureItemDetails_reflection_;
  delete BuildingItemDetails::default_instance_;
  delete BuildingItemDetails_reflection_;
  delete InstallationItemDetails::default_instance_;
  delete InstallationItemDetails_reflection_;
  delete HarvesterItemDetails::default_instance_;
  delete HarvesterItemDetails_reflection_;
  delete FactoryItemDetails::default_instance_;
  delete FactoryItemDetails_reflection_;
  delete GetStructureItemDetailsRequest::default_instance_;
  delete GetStructureItemDetailsRequest_reflection_;
  delete GetStructureItemDetailsResponse::default_instance_;
  delete GetStructureItemDetailsResponse_reflection_;
}

void protobuf_AddDesc_StructureDetails_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::swgemurpcserver::rpc::protobuf_AddDesc_InventoryItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026StructureDetails.proto\022\023swgemurpcserve"
    "r.rpc\032\023InventoryItem.proto\"\265\004\n\032SWGEmuStr"
    "uctureItemDetails\022\021\n\tobject_id\030\001 \002(\006\022\034\n\024"
    "appearance_file_name\030\002 \002(\t\022\023\n\013object_nam"
    "e\030\003 \002(\t\022\024\n\014display_name\030\004 \002(\t\022\032\n\022owner_d"
    "isplay_name\030\005 \002(\t\022\027\n\017owner_object_id\030\006 \002"
    "(\006\022\030\n\020owner_account_id\030\007 \001(\007\022\017\n\007world_x\030"
    "\010 \001(\002\022\017\n\007world_y\030\t \001(\002\022\017\n\007world_z\030\n \001(\002\022"
    "\014\n\004zone\030\013 \001(\t\022\r\n\005power\030\014 \001(\005\022\023\n\013maintena"
    "nce\030\r \001(\005\022\025\n\rdecay_percent\030\016 \001(\005\022\020\n\010lot_"
    "size\030\017 \001(\005\022\032\n\022template_file_name\030\020 \001(\t\022\031"
    "\n\021portals_file_name\030\021 \001(\t\022\027\n\017buildable_z"
    "ones\030\022 \003(\t\022B\n\020building_details\030\024 \001(\0132(.s"
    "wgemurpcserver.rpc.BuildingItemDetails\022J"
    "\n\024installation_details\030\025 \001(\0132,.swgemurpc"
    "server.rpc.InstallationItemDetails\"[\n\023Bu"
    "ildingItemDetails\022D\n\017contained_items\030\001 \003"
    "(\0132+.swgemurpcserver.rpc.CharacterInvent"
    "oryItem\"\245\002\n\027InstallationItemDetails\022\021\n\to"
    "perating\030\001 \002(\010\022\023\n\013actual_rate\030\002 \002(\002\022\027\n\017m"
    "ax_hopper_size\030\003 \002(\002\022D\n\021harvester_detail"
    "s\030\004 \001(\0132).swgemurpcserver.rpc.HarvesterI"
    "temDetails\022@\n\017factory_details\030\005 \001(\0132\'.sw"
    "gemurpcserver.rpc.FactoryItemDetails\022A\n\014"
    "hopper_items\030\n \003(\0132+.swgemurpcserver.rpc"
    ".CharacterInventoryItem\"/\n\024HarvesterItem"
    "Details\022\027\n\017extraction_rate\030\001 \002(\002\"\233\001\n\022Fac"
    "toryItemDetails\022>\n\tschematic\030\001 \001(\0132+.swg"
    "emurpcserver.rpc.CharacterInventoryItem\022"
    "E\n\020ingredient_items\030\n \003(\0132+.swgemurpcser"
    "ver.rpc.CharacterInventoryItem\"L\n\036GetStr"
    "uctureItemDetailsRequest\022\021\n\tobject_id\030\001 "
    "\002(\006\022\027\n\017owner_object_id\030\002 \001(\006\"f\n\037GetStruc"
    "tureItemDetailsResponse\022C\n\nstructures\030\001 "
    "\003(\0132/.swgemurpcserver.rpc.SWGEmuStructur"
    "eItemDetails2\252\001\n!SWGEmuStructureItemDeta"
    "ilsService\022\204\001\n\027GetStructureItemDetails\0223"
    ".swgemurpcserver.rpc.GetStructureItemDet"
    "ailsRequest\0324.swgemurpcserver.rpc.GetStr"
    "uctureItemDetailsResponseB\003\200\001\001", 1590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StructureDetails.proto", &protobuf_RegisterTypes);
  SWGEmuStructureItemDetails::default_instance_ = new SWGEmuStructureItemDetails();
  BuildingItemDetails::default_instance_ = new BuildingItemDetails();
  InstallationItemDetails::default_instance_ = new InstallationItemDetails();
  HarvesterItemDetails::default_instance_ = new HarvesterItemDetails();
  FactoryItemDetails::default_instance_ = new FactoryItemDetails();
  GetStructureItemDetailsRequest::default_instance_ = new GetStructureItemDetailsRequest();
  GetStructureItemDetailsResponse::default_instance_ = new GetStructureItemDetailsResponse();
  SWGEmuStructureItemDetails::default_instance_->InitAsDefaultInstance();
  BuildingItemDetails::default_instance_->InitAsDefaultInstance();
  InstallationItemDetails::default_instance_->InitAsDefaultInstance();
  HarvesterItemDetails::default_instance_->InitAsDefaultInstance();
  FactoryItemDetails::default_instance_->InitAsDefaultInstance();
  GetStructureItemDetailsRequest::default_instance_->InitAsDefaultInstance();
  GetStructureItemDetailsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StructureDetails_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StructureDetails_2eproto {
  StaticDescriptorInitializer_StructureDetails_2eproto() {
    protobuf_AddDesc_StructureDetails_2eproto();
  }
} static_descriptor_initializer_StructureDetails_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SWGEmuStructureItemDetails::kObjectIdFieldNumber;
const int SWGEmuStructureItemDetails::kAppearanceFileNameFieldNumber;
const int SWGEmuStructureItemDetails::kObjectNameFieldNumber;
const int SWGEmuStructureItemDetails::kDisplayNameFieldNumber;
const int SWGEmuStructureItemDetails::kOwnerDisplayNameFieldNumber;
const int SWGEmuStructureItemDetails::kOwnerObjectIdFieldNumber;
const int SWGEmuStructureItemDetails::kOwnerAccountIdFieldNumber;
const int SWGEmuStructureItemDetails::kWorldXFieldNumber;
const int SWGEmuStructureItemDetails::kWorldYFieldNumber;
const int SWGEmuStructureItemDetails::kWorldZFieldNumber;
const int SWGEmuStructureItemDetails::kZoneFieldNumber;
const int SWGEmuStructureItemDetails::kPowerFieldNumber;
const int SWGEmuStructureItemDetails::kMaintenanceFieldNumber;
const int SWGEmuStructureItemDetails::kDecayPercentFieldNumber;
const int SWGEmuStructureItemDetails::kLotSizeFieldNumber;
const int SWGEmuStructureItemDetails::kTemplateFileNameFieldNumber;
const int SWGEmuStructureItemDetails::kPortalsFileNameFieldNumber;
const int SWGEmuStructureItemDetails::kBuildableZonesFieldNumber;
const int SWGEmuStructureItemDetails::kBuildingDetailsFieldNumber;
const int SWGEmuStructureItemDetails::kInstallationDetailsFieldNumber;
#endif  // !_MSC_VER

SWGEmuStructureItemDetails::SWGEmuStructureItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWGEmuStructureItemDetails::InitAsDefaultInstance() {
  building_details_ = const_cast< ::swgemurpcserver::rpc::BuildingItemDetails*>(&::swgemurpcserver::rpc::BuildingItemDetails::default_instance());
  installation_details_ = const_cast< ::swgemurpcserver::rpc::InstallationItemDetails*>(&::swgemurpcserver::rpc::InstallationItemDetails::default_instance());
}

SWGEmuStructureItemDetails::SWGEmuStructureItemDetails(const SWGEmuStructureItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWGEmuStructureItemDetails::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  appearance_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_object_id_ = GOOGLE_ULONGLONG(0);
  owner_account_id_ = 0u;
  world_x_ = 0;
  world_y_ = 0;
  world_z_ = 0;
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  maintenance_ = 0;
  decay_percent_ = 0;
  lot_size_ = 0;
  template_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portals_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  building_details_ = NULL;
  installation_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWGEmuStructureItemDetails::~SWGEmuStructureItemDetails() {
  SharedDtor();
}

void SWGEmuStructureItemDetails::SharedDtor() {
  if (appearance_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete appearance_file_name_;
  }
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (owner_display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_display_name_;
  }
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (template_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete template_file_name_;
  }
  if (portals_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete portals_file_name_;
  }
  if (this != default_instance_) {
    delete building_details_;
    delete installation_details_;
  }
}

void SWGEmuStructureItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWGEmuStructureItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuStructureItemDetails_descriptor_;
}

const SWGEmuStructureItemDetails& SWGEmuStructureItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

SWGEmuStructureItemDetails* SWGEmuStructureItemDetails::default_instance_ = NULL;

SWGEmuStructureItemDetails* SWGEmuStructureItemDetails::New() const {
  return new SWGEmuStructureItemDetails;
}

void SWGEmuStructureItemDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_appearance_file_name()) {
      if (appearance_file_name_ != &::google::protobuf::internal::kEmptyString) {
        appearance_file_name_->clear();
      }
    }
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    if (has_owner_display_name()) {
      if (owner_display_name_ != &::google::protobuf::internal::kEmptyString) {
        owner_display_name_->clear();
      }
    }
    owner_object_id_ = GOOGLE_ULONGLONG(0);
    owner_account_id_ = 0u;
    world_x_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    world_y_ = 0;
    world_z_ = 0;
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::kEmptyString) {
        zone_->clear();
      }
    }
    power_ = 0;
    maintenance_ = 0;
    decay_percent_ = 0;
    lot_size_ = 0;
    if (has_template_file_name()) {
      if (template_file_name_ != &::google::protobuf::internal::kEmptyString) {
        template_file_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_portals_file_name()) {
      if (portals_file_name_ != &::google::protobuf::internal::kEmptyString) {
        portals_file_name_->clear();
      }
    }
    if (has_building_details()) {
      if (building_details_ != NULL) building_details_->::swgemurpcserver::rpc::BuildingItemDetails::Clear();
    }
    if (has_installation_details()) {
      if (installation_details_ != NULL) installation_details_->::swgemurpcserver::rpc::InstallationItemDetails::Clear();
    }
  }
  buildable_zones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWGEmuStructureItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appearance_file_name;
        break;
      }

      // required string appearance_file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appearance_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appearance_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appearance_file_name().data(), this->appearance_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object_name;
        break;
      }

      // required string object_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_display_name;
        break;
      }

      // required string display_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_owner_display_name;
        break;
      }

      // required string owner_display_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_display_name().data(), this->owner_display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_owner_object_id;
        break;
      }

      // required fixed64 owner_object_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_object_id_)));
          set_has_owner_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_owner_account_id;
        break;
      }

      // optional fixed32 owner_account_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_world_x;
        break;
      }

      // optional float world_x = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_world_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &world_x_)));
          set_has_world_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_world_y;
        break;
      }

      // optional float world_y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_world_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &world_y_)));
          set_has_world_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_world_z;
        break;
      }

      // optional float world_z = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_world_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &world_z_)));
          set_has_world_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_zone;
        break;
      }

      // optional string zone = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_power;
        break;
      }

      // optional int32 power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maintenance;
        break;
      }

      // optional int32 maintenance = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintenance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintenance_)));
          set_has_maintenance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_decay_percent;
        break;
      }

      // optional int32 decay_percent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decay_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decay_percent_)));
          set_has_decay_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lot_size;
        break;
      }

      // optional int32 lot_size = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lot_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lot_size_)));
          set_has_lot_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_template_file_name;
        break;
      }

      // optional string template_file_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->template_file_name().data(), this->template_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_portals_file_name;
        break;
      }

      // optional string portals_file_name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portals_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portals_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portals_file_name().data(), this->portals_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_buildable_zones;
        break;
      }

      // repeated string buildable_zones = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildable_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_buildable_zones()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildable_zones(this->buildable_zones_size() - 1).data(),
            this->buildable_zones(this->buildable_zones_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_buildable_zones;
        if (input->ExpectTag(162)) goto parse_building_details;
        break;
      }

      // optional .swgemurpcserver.rpc.BuildingItemDetails building_details = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_installation_details;
        break;
      }

      // optional .swgemurpcserver.rpc.InstallationItemDetails installation_details = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_installation_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_installation_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWGEmuStructureItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // required string appearance_file_name = 2;
  if (has_appearance_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file_name().data(), this->appearance_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appearance_file_name(), output);
  }

  // required string object_name = 3;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->object_name(), output);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->display_name(), output);
  }

  // required string owner_display_name = 5;
  if (has_owner_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_display_name().data(), this->owner_display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->owner_display_name(), output);
  }

  // required fixed64 owner_object_id = 6;
  if (has_owner_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->owner_object_id(), output);
  }

  // optional fixed32 owner_account_id = 7;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->owner_account_id(), output);
  }

  // optional float world_x = 8;
  if (has_world_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->world_x(), output);
  }

  // optional float world_y = 9;
  if (has_world_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->world_y(), output);
  }

  // optional float world_z = 10;
  if (has_world_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->world_z(), output);
  }

  // optional string zone = 11;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->zone(), output);
  }

  // optional int32 power = 12;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->power(), output);
  }

  // optional int32 maintenance = 13;
  if (has_maintenance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maintenance(), output);
  }

  // optional int32 decay_percent = 14;
  if (has_decay_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->decay_percent(), output);
  }

  // optional int32 lot_size = 15;
  if (has_lot_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lot_size(), output);
  }

  // optional string template_file_name = 16;
  if (has_template_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file_name().data(), this->template_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->template_file_name(), output);
  }

  // optional string portals_file_name = 17;
  if (has_portals_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portals_file_name().data(), this->portals_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->portals_file_name(), output);
  }

  // repeated string buildable_zones = 18;
  for (int i = 0; i < this->buildable_zones_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->buildable_zones(i).data(), this->buildable_zones(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->buildable_zones(i), output);
  }

  // optional .swgemurpcserver.rpc.BuildingItemDetails building_details = 20;
  if (has_building_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->building_details(), output);
  }

  // optional .swgemurpcserver.rpc.InstallationItemDetails installation_details = 21;
  if (has_installation_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->installation_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWGEmuStructureItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // required string appearance_file_name = 2;
  if (has_appearance_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file_name().data(), this->appearance_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appearance_file_name(), target);
  }

  // required string object_name = 3;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object_name(), target);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_name(), target);
  }

  // required string owner_display_name = 5;
  if (has_owner_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_display_name().data(), this->owner_display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner_display_name(), target);
  }

  // required fixed64 owner_object_id = 6;
  if (has_owner_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->owner_object_id(), target);
  }

  // optional fixed32 owner_account_id = 7;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->owner_account_id(), target);
  }

  // optional float world_x = 8;
  if (has_world_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->world_x(), target);
  }

  // optional float world_y = 9;
  if (has_world_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->world_y(), target);
  }

  // optional float world_z = 10;
  if (has_world_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->world_z(), target);
  }

  // optional string zone = 11;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->zone(), target);
  }

  // optional int32 power = 12;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->power(), target);
  }

  // optional int32 maintenance = 13;
  if (has_maintenance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maintenance(), target);
  }

  // optional int32 decay_percent = 14;
  if (has_decay_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->decay_percent(), target);
  }

  // optional int32 lot_size = 15;
  if (has_lot_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lot_size(), target);
  }

  // optional string template_file_name = 16;
  if (has_template_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file_name().data(), this->template_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->template_file_name(), target);
  }

  // optional string portals_file_name = 17;
  if (has_portals_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portals_file_name().data(), this->portals_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->portals_file_name(), target);
  }

  // repeated string buildable_zones = 18;
  for (int i = 0; i < this->buildable_zones_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildable_zones(i).data(), this->buildable_zones(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->buildable_zones(i), target);
  }

  // optional .swgemurpcserver.rpc.BuildingItemDetails building_details = 20;
  if (has_building_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->building_details(), target);
  }

  // optional .swgemurpcserver.rpc.InstallationItemDetails installation_details = 21;
  if (has_installation_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->installation_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWGEmuStructureItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // required string appearance_file_name = 2;
    if (has_appearance_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appearance_file_name());
    }

    // required string object_name = 3;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }

    // required string display_name = 4;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required string owner_display_name = 5;
    if (has_owner_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_display_name());
    }

    // required fixed64 owner_object_id = 6;
    if (has_owner_object_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 owner_account_id = 7;
    if (has_owner_account_id()) {
      total_size += 1 + 4;
    }

    // optional float world_x = 8;
    if (has_world_x()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float world_y = 9;
    if (has_world_y()) {
      total_size += 1 + 4;
    }

    // optional float world_z = 10;
    if (has_world_z()) {
      total_size += 1 + 4;
    }

    // optional string zone = 11;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }

    // optional int32 power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 maintenance = 13;
    if (has_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintenance());
    }

    // optional int32 decay_percent = 14;
    if (has_decay_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decay_percent());
    }

    // optional int32 lot_size = 15;
    if (has_lot_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lot_size());
    }

    // optional string template_file_name = 16;
    if (has_template_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_file_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string portals_file_name = 17;
    if (has_portals_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portals_file_name());
    }

    // optional .swgemurpcserver.rpc.BuildingItemDetails building_details = 20;
    if (has_building_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building_details());
    }

    // optional .swgemurpcserver.rpc.InstallationItemDetails installation_details = 21;
    if (has_installation_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->installation_details());
    }

  }
  // repeated string buildable_zones = 18;
  total_size += 2 * this->buildable_zones_size();
  for (int i = 0; i < this->buildable_zones_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->buildable_zones(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWGEmuStructureItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWGEmuStructureItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWGEmuStructureItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWGEmuStructureItemDetails::MergeFrom(const SWGEmuStructureItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildable_zones_.MergeFrom(from.buildable_zones_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_appearance_file_name()) {
      set_appearance_file_name(from.appearance_file_name());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_owner_display_name()) {
      set_owner_display_name(from.owner_display_name());
    }
    if (from.has_owner_object_id()) {
      set_owner_object_id(from.owner_object_id());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_world_x()) {
      set_world_x(from.world_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_world_y()) {
      set_world_y(from.world_y());
    }
    if (from.has_world_z()) {
      set_world_z(from.world_z());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_maintenance()) {
      set_maintenance(from.maintenance());
    }
    if (from.has_decay_percent()) {
      set_decay_percent(from.decay_percent());
    }
    if (from.has_lot_size()) {
      set_lot_size(from.lot_size());
    }
    if (from.has_template_file_name()) {
      set_template_file_name(from.template_file_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_portals_file_name()) {
      set_portals_file_name(from.portals_file_name());
    }
    if (from.has_building_details()) {
      mutable_building_details()->::swgemurpcserver::rpc::BuildingItemDetails::MergeFrom(from.building_details());
    }
    if (from.has_installation_details()) {
      mutable_installation_details()->::swgemurpcserver::rpc::InstallationItemDetails::MergeFrom(from.installation_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWGEmuStructureItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWGEmuStructureItemDetails::CopyFrom(const SWGEmuStructureItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWGEmuStructureItemDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_building_details()) {
    if (!this->building_details().IsInitialized()) return false;
  }
  if (has_installation_details()) {
    if (!this->installation_details().IsInitialized()) return false;
  }
  return true;
}

void SWGEmuStructureItemDetails::Swap(SWGEmuStructureItemDetails* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(appearance_file_name_, other->appearance_file_name_);
    std::swap(object_name_, other->object_name_);
    std::swap(display_name_, other->display_name_);
    std::swap(owner_display_name_, other->owner_display_name_);
    std::swap(owner_object_id_, other->owner_object_id_);
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(world_x_, other->world_x_);
    std::swap(world_y_, other->world_y_);
    std::swap(world_z_, other->world_z_);
    std::swap(zone_, other->zone_);
    std::swap(power_, other->power_);
    std::swap(maintenance_, other->maintenance_);
    std::swap(decay_percent_, other->decay_percent_);
    std::swap(lot_size_, other->lot_size_);
    std::swap(template_file_name_, other->template_file_name_);
    std::swap(portals_file_name_, other->portals_file_name_);
    buildable_zones_.Swap(&other->buildable_zones_);
    std::swap(building_details_, other->building_details_);
    std::swap(installation_details_, other->installation_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWGEmuStructureItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWGEmuStructureItemDetails_descriptor_;
  metadata.reflection = SWGEmuStructureItemDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingItemDetails::kContainedItemsFieldNumber;
#endif  // !_MSC_VER

BuildingItemDetails::BuildingItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingItemDetails::InitAsDefaultInstance() {
}

BuildingItemDetails::BuildingItemDetails(const BuildingItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingItemDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingItemDetails::~BuildingItemDetails() {
  SharedDtor();
}

void BuildingItemDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingItemDetails_descriptor_;
}

const BuildingItemDetails& BuildingItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

BuildingItemDetails* BuildingItemDetails::default_instance_ = NULL;

BuildingItemDetails* BuildingItemDetails::New() const {
  return new BuildingItemDetails;
}

void BuildingItemDetails::Clear() {
  contained_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contained_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contained_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contained_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 1;
  for (int i = 0; i < this->contained_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contained_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 1;
  for (int i = 0; i < this->contained_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contained_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingItemDetails::ByteSize() const {
  int total_size = 0;

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 1;
  total_size += 1 * this->contained_items_size();
  for (int i = 0; i < this->contained_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contained_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingItemDetails::MergeFrom(const BuildingItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  contained_items_.MergeFrom(from.contained_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingItemDetails::CopyFrom(const BuildingItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingItemDetails::IsInitialized() const {

  for (int i = 0; i < contained_items_size(); i++) {
    if (!this->contained_items(i).IsInitialized()) return false;
  }
  return true;
}

void BuildingItemDetails::Swap(BuildingItemDetails* other) {
  if (other != this) {
    contained_items_.Swap(&other->contained_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingItemDetails_descriptor_;
  metadata.reflection = BuildingItemDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallationItemDetails::kOperatingFieldNumber;
const int InstallationItemDetails::kActualRateFieldNumber;
const int InstallationItemDetails::kMaxHopperSizeFieldNumber;
const int InstallationItemDetails::kHarvesterDetailsFieldNumber;
const int InstallationItemDetails::kFactoryDetailsFieldNumber;
const int InstallationItemDetails::kHopperItemsFieldNumber;
#endif  // !_MSC_VER

InstallationItemDetails::InstallationItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstallationItemDetails::InitAsDefaultInstance() {
  harvester_details_ = const_cast< ::swgemurpcserver::rpc::HarvesterItemDetails*>(&::swgemurpcserver::rpc::HarvesterItemDetails::default_instance());
  factory_details_ = const_cast< ::swgemurpcserver::rpc::FactoryItemDetails*>(&::swgemurpcserver::rpc::FactoryItemDetails::default_instance());
}

InstallationItemDetails::InstallationItemDetails(const InstallationItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstallationItemDetails::SharedCtor() {
  _cached_size_ = 0;
  operating_ = false;
  actual_rate_ = 0;
  max_hopper_size_ = 0;
  harvester_details_ = NULL;
  factory_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallationItemDetails::~InstallationItemDetails() {
  SharedDtor();
}

void InstallationItemDetails::SharedDtor() {
  if (this != default_instance_) {
    delete harvester_details_;
    delete factory_details_;
  }
}

void InstallationItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallationItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallationItemDetails_descriptor_;
}

const InstallationItemDetails& InstallationItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

InstallationItemDetails* InstallationItemDetails::default_instance_ = NULL;

InstallationItemDetails* InstallationItemDetails::New() const {
  return new InstallationItemDetails;
}

void InstallationItemDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operating_ = false;
    actual_rate_ = 0;
    max_hopper_size_ = 0;
    if (has_harvester_details()) {
      if (harvester_details_ != NULL) harvester_details_->::swgemurpcserver::rpc::HarvesterItemDetails::Clear();
    }
    if (has_factory_details()) {
      if (factory_details_ != NULL) factory_details_->::swgemurpcserver::rpc::FactoryItemDetails::Clear();
    }
  }
  hopper_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallationItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool operating = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operating_)));
          set_has_operating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_actual_rate;
        break;
      }

      // required float actual_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_actual_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actual_rate_)));
          set_has_actual_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_max_hopper_size;
        break;
      }

      // required float max_hopper_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_hopper_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_hopper_size_)));
          set_has_max_hopper_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_harvester_details;
        break;
      }

      // optional .swgemurpcserver.rpc.HarvesterItemDetails harvester_details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harvester_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harvester_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factory_details;
        break;
      }

      // optional .swgemurpcserver.rpc.FactoryItemDetails factory_details = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factory_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factory_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hopper_items;
        break;
      }

      // repeated .swgemurpcserver.rpc.CharacterInventoryItem hopper_items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hopper_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hopper_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hopper_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstallationItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool operating = 1;
  if (has_operating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->operating(), output);
  }

  // required float actual_rate = 2;
  if (has_actual_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->actual_rate(), output);
  }

  // required float max_hopper_size = 3;
  if (has_max_hopper_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_hopper_size(), output);
  }

  // optional .swgemurpcserver.rpc.HarvesterItemDetails harvester_details = 4;
  if (has_harvester_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->harvester_details(), output);
  }

  // optional .swgemurpcserver.rpc.FactoryItemDetails factory_details = 5;
  if (has_factory_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->factory_details(), output);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem hopper_items = 10;
  for (int i = 0; i < this->hopper_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hopper_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstallationItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool operating = 1;
  if (has_operating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->operating(), target);
  }

  // required float actual_rate = 2;
  if (has_actual_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->actual_rate(), target);
  }

  // required float max_hopper_size = 3;
  if (has_max_hopper_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_hopper_size(), target);
  }

  // optional .swgemurpcserver.rpc.HarvesterItemDetails harvester_details = 4;
  if (has_harvester_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->harvester_details(), target);
  }

  // optional .swgemurpcserver.rpc.FactoryItemDetails factory_details = 5;
  if (has_factory_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->factory_details(), target);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem hopper_items = 10;
  for (int i = 0; i < this->hopper_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hopper_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstallationItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool operating = 1;
    if (has_operating()) {
      total_size += 1 + 1;
    }

    // required float actual_rate = 2;
    if (has_actual_rate()) {
      total_size += 1 + 4;
    }

    // required float max_hopper_size = 3;
    if (has_max_hopper_size()) {
      total_size += 1 + 4;
    }

    // optional .swgemurpcserver.rpc.HarvesterItemDetails harvester_details = 4;
    if (has_harvester_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harvester_details());
    }

    // optional .swgemurpcserver.rpc.FactoryItemDetails factory_details = 5;
    if (has_factory_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factory_details());
    }

  }
  // repeated .swgemurpcserver.rpc.CharacterInventoryItem hopper_items = 10;
  total_size += 1 * this->hopper_items_size();
  for (int i = 0; i < this->hopper_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hopper_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallationItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallationItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallationItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallationItemDetails::MergeFrom(const InstallationItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  hopper_items_.MergeFrom(from.hopper_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operating()) {
      set_operating(from.operating());
    }
    if (from.has_actual_rate()) {
      set_actual_rate(from.actual_rate());
    }
    if (from.has_max_hopper_size()) {
      set_max_hopper_size(from.max_hopper_size());
    }
    if (from.has_harvester_details()) {
      mutable_harvester_details()->::swgemurpcserver::rpc::HarvesterItemDetails::MergeFrom(from.harvester_details());
    }
    if (from.has_factory_details()) {
      mutable_factory_details()->::swgemurpcserver::rpc::FactoryItemDetails::MergeFrom(from.factory_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallationItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallationItemDetails::CopyFrom(const InstallationItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallationItemDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_harvester_details()) {
    if (!this->harvester_details().IsInitialized()) return false;
  }
  if (has_factory_details()) {
    if (!this->factory_details().IsInitialized()) return false;
  }
  for (int i = 0; i < hopper_items_size(); i++) {
    if (!this->hopper_items(i).IsInitialized()) return false;
  }
  return true;
}

void InstallationItemDetails::Swap(InstallationItemDetails* other) {
  if (other != this) {
    std::swap(operating_, other->operating_);
    std::swap(actual_rate_, other->actual_rate_);
    std::swap(max_hopper_size_, other->max_hopper_size_);
    std::swap(harvester_details_, other->harvester_details_);
    std::swap(factory_details_, other->factory_details_);
    hopper_items_.Swap(&other->hopper_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallationItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallationItemDetails_descriptor_;
  metadata.reflection = InstallationItemDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HarvesterItemDetails::kExtractionRateFieldNumber;
#endif  // !_MSC_VER

HarvesterItemDetails::HarvesterItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HarvesterItemDetails::InitAsDefaultInstance() {
}

HarvesterItemDetails::HarvesterItemDetails(const HarvesterItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HarvesterItemDetails::SharedCtor() {
  _cached_size_ = 0;
  extraction_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarvesterItemDetails::~HarvesterItemDetails() {
  SharedDtor();
}

void HarvesterItemDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HarvesterItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarvesterItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarvesterItemDetails_descriptor_;
}

const HarvesterItemDetails& HarvesterItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

HarvesterItemDetails* HarvesterItemDetails::default_instance_ = NULL;

HarvesterItemDetails* HarvesterItemDetails::New() const {
  return new HarvesterItemDetails;
}

void HarvesterItemDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    extraction_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarvesterItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float extraction_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &extraction_rate_)));
          set_has_extraction_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HarvesterItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float extraction_rate = 1;
  if (has_extraction_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->extraction_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HarvesterItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float extraction_rate = 1;
  if (has_extraction_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->extraction_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HarvesterItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float extraction_rate = 1;
    if (has_extraction_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarvesterItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarvesterItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarvesterItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarvesterItemDetails::MergeFrom(const HarvesterItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extraction_rate()) {
      set_extraction_rate(from.extraction_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarvesterItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarvesterItemDetails::CopyFrom(const HarvesterItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarvesterItemDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HarvesterItemDetails::Swap(HarvesterItemDetails* other) {
  if (other != this) {
    std::swap(extraction_rate_, other->extraction_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarvesterItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarvesterItemDetails_descriptor_;
  metadata.reflection = HarvesterItemDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactoryItemDetails::kSchematicFieldNumber;
const int FactoryItemDetails::kIngredientItemsFieldNumber;
#endif  // !_MSC_VER

FactoryItemDetails::FactoryItemDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactoryItemDetails::InitAsDefaultInstance() {
  schematic_ = const_cast< ::swgemurpcserver::rpc::CharacterInventoryItem*>(&::swgemurpcserver::rpc::CharacterInventoryItem::default_instance());
}

FactoryItemDetails::FactoryItemDetails(const FactoryItemDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactoryItemDetails::SharedCtor() {
  _cached_size_ = 0;
  schematic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryItemDetails::~FactoryItemDetails() {
  SharedDtor();
}

void FactoryItemDetails::SharedDtor() {
  if (this != default_instance_) {
    delete schematic_;
  }
}

void FactoryItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryItemDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryItemDetails_descriptor_;
}

const FactoryItemDetails& FactoryItemDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

FactoryItemDetails* FactoryItemDetails::default_instance_ = NULL;

FactoryItemDetails* FactoryItemDetails::New() const {
  return new FactoryItemDetails;
}

void FactoryItemDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schematic()) {
      if (schematic_ != NULL) schematic_->::swgemurpcserver::rpc::CharacterInventoryItem::Clear();
    }
  }
  ingredient_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .swgemurpcserver.rpc.CharacterInventoryItem schematic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schematic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ingredient_items;
        break;
      }

      // repeated .swgemurpcserver.rpc.CharacterInventoryItem ingredient_items = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingredient_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ingredient_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ingredient_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactoryItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .swgemurpcserver.rpc.CharacterInventoryItem schematic = 1;
  if (has_schematic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schematic(), output);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem ingredient_items = 10;
  for (int i = 0; i < this->ingredient_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->ingredient_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactoryItemDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .swgemurpcserver.rpc.CharacterInventoryItem schematic = 1;
  if (has_schematic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schematic(), target);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem ingredient_items = 10;
  for (int i = 0; i < this->ingredient_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->ingredient_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactoryItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .swgemurpcserver.rpc.CharacterInventoryItem schematic = 1;
    if (has_schematic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schematic());
    }

  }
  // repeated .swgemurpcserver.rpc.CharacterInventoryItem ingredient_items = 10;
  total_size += 1 * this->ingredient_items_size();
  for (int i = 0; i < this->ingredient_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ingredient_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryItemDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryItemDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryItemDetails::MergeFrom(const FactoryItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  ingredient_items_.MergeFrom(from.ingredient_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schematic()) {
      mutable_schematic()->::swgemurpcserver::rpc::CharacterInventoryItem::MergeFrom(from.schematic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryItemDetails::CopyFrom(const FactoryItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryItemDetails::IsInitialized() const {

  if (has_schematic()) {
    if (!this->schematic().IsInitialized()) return false;
  }
  for (int i = 0; i < ingredient_items_size(); i++) {
    if (!this->ingredient_items(i).IsInitialized()) return false;
  }
  return true;
}

void FactoryItemDetails::Swap(FactoryItemDetails* other) {
  if (other != this) {
    std::swap(schematic_, other->schematic_);
    ingredient_items_.Swap(&other->ingredient_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryItemDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryItemDetails_descriptor_;
  metadata.reflection = FactoryItemDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStructureItemDetailsRequest::kObjectIdFieldNumber;
const int GetStructureItemDetailsRequest::kOwnerObjectIdFieldNumber;
#endif  // !_MSC_VER

GetStructureItemDetailsRequest::GetStructureItemDetailsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStructureItemDetailsRequest::InitAsDefaultInstance() {
}

GetStructureItemDetailsRequest::GetStructureItemDetailsRequest(const GetStructureItemDetailsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStructureItemDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  owner_object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStructureItemDetailsRequest::~GetStructureItemDetailsRequest() {
  SharedDtor();
}

void GetStructureItemDetailsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStructureItemDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStructureItemDetailsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStructureItemDetailsRequest_descriptor_;
}

const GetStructureItemDetailsRequest& GetStructureItemDetailsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

GetStructureItemDetailsRequest* GetStructureItemDetailsRequest::default_instance_ = NULL;

GetStructureItemDetailsRequest* GetStructureItemDetailsRequest::New() const {
  return new GetStructureItemDetailsRequest;
}

void GetStructureItemDetailsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    owner_object_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStructureItemDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_owner_object_id;
        break;
      }

      // optional fixed64 owner_object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_object_id_)));
          set_has_owner_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStructureItemDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // optional fixed64 owner_object_id = 2;
  if (has_owner_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owner_object_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStructureItemDetailsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // optional fixed64 owner_object_id = 2;
  if (has_owner_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owner_object_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStructureItemDetailsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_object_id = 2;
    if (has_owner_object_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStructureItemDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStructureItemDetailsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStructureItemDetailsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStructureItemDetailsRequest::MergeFrom(const GetStructureItemDetailsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_owner_object_id()) {
      set_owner_object_id(from.owner_object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStructureItemDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStructureItemDetailsRequest::CopyFrom(const GetStructureItemDetailsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStructureItemDetailsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetStructureItemDetailsRequest::Swap(GetStructureItemDetailsRequest* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(owner_object_id_, other->owner_object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStructureItemDetailsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStructureItemDetailsRequest_descriptor_;
  metadata.reflection = GetStructureItemDetailsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStructureItemDetailsResponse::kStructuresFieldNumber;
#endif  // !_MSC_VER

GetStructureItemDetailsResponse::GetStructureItemDetailsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStructureItemDetailsResponse::InitAsDefaultInstance() {
}

GetStructureItemDetailsResponse::GetStructureItemDetailsResponse(const GetStructureItemDetailsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStructureItemDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStructureItemDetailsResponse::~GetStructureItemDetailsResponse() {
  SharedDtor();
}

void GetStructureItemDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStructureItemDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStructureItemDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStructureItemDetailsResponse_descriptor_;
}

const GetStructureItemDetailsResponse& GetStructureItemDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StructureDetails_2eproto();
  return *default_instance_;
}

GetStructureItemDetailsResponse* GetStructureItemDetailsResponse::default_instance_ = NULL;

GetStructureItemDetailsResponse* GetStructureItemDetailsResponse::New() const {
  return new GetStructureItemDetailsResponse;
}

void GetStructureItemDetailsResponse::Clear() {
  structures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStructureItemDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swgemurpcserver.rpc.SWGEmuStructureItemDetails structures = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_structures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_structures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStructureItemDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .swgemurpcserver.rpc.SWGEmuStructureItemDetails structures = 1;
  for (int i = 0; i < this->structures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->structures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStructureItemDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .swgemurpcserver.rpc.SWGEmuStructureItemDetails structures = 1;
  for (int i = 0; i < this->structures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->structures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStructureItemDetailsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .swgemurpcserver.rpc.SWGEmuStructureItemDetails structures = 1;
  total_size += 1 * this->structures_size();
  for (int i = 0; i < this->structures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStructureItemDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStructureItemDetailsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStructureItemDetailsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStructureItemDetailsResponse::MergeFrom(const GetStructureItemDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  structures_.MergeFrom(from.structures_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStructureItemDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStructureItemDetailsResponse::CopyFrom(const GetStructureItemDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStructureItemDetailsResponse::IsInitialized() const {

  for (int i = 0; i < structures_size(); i++) {
    if (!this->structures(i).IsInitialized()) return false;
  }
  return true;
}

void GetStructureItemDetailsResponse::Swap(GetStructureItemDetailsResponse* other) {
  if (other != this) {
    structures_.Swap(&other->structures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStructureItemDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStructureItemDetailsResponse_descriptor_;
  metadata.reflection = GetStructureItemDetailsResponse_reflection_;
  return metadata;
}


// ===================================================================

SWGEmuStructureItemDetailsService::~SWGEmuStructureItemDetailsService() {}

const ::google::protobuf::ServiceDescriptor* SWGEmuStructureItemDetailsService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuStructureItemDetailsService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SWGEmuStructureItemDetailsService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuStructureItemDetailsService_descriptor_;
}

void SWGEmuStructureItemDetailsService::GetStructureItemDetails(::google::protobuf::RpcController* controller,
                         const ::swgemurpcserver::rpc::GetStructureItemDetailsRequest*,
                         ::swgemurpcserver::rpc::GetStructureItemDetailsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStructureItemDetails() not implemented.");
  done->Run();
}

void SWGEmuStructureItemDetailsService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SWGEmuStructureItemDetailsService_descriptor_);
  switch(method->index()) {
    case 0:
      GetStructureItemDetails(controller,
             ::google::protobuf::down_cast<const ::swgemurpcserver::rpc::GetStructureItemDetailsRequest*>(request),
             ::google::protobuf::down_cast< ::swgemurpcserver::rpc::GetStructureItemDetailsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SWGEmuStructureItemDetailsService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetStructureItemDetailsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SWGEmuStructureItemDetailsService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetStructureItemDetailsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SWGEmuStructureItemDetailsService_Stub::SWGEmuStructureItemDetailsService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SWGEmuStructureItemDetailsService_Stub::SWGEmuStructureItemDetailsService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SWGEmuStructureItemDetailsService_Stub::~SWGEmuStructureItemDetailsService_Stub() {
  if (owns_channel_) delete channel_;
}

void SWGEmuStructureItemDetailsService_Stub::GetStructureItemDetails(::google::protobuf::RpcController* controller,
                              const ::swgemurpcserver::rpc::GetStructureItemDetailsRequest* request,
                              ::swgemurpcserver::rpc::GetStructureItemDetailsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace swgemurpcserver

// @@protoc_insertion_point(global_scope)
