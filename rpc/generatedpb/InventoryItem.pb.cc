// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InventoryItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InventoryItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swgemurpcserver {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* CharacterInventoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInventoryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceContainerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceContainerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceSpawnClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceSpawnClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactoryCrateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryCrateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PharmaceuticalItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PharmaceuticalItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PharmaceuticalItem_PharmaceuticalItemType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RangedStimPackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangedStimPackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DotPackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotPackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnhancePackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnhancePackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevivePackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevivePackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WoundPackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WoundPackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CraftingComponentItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CraftingComponentItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CraftingComponentAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CraftingComponentAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManufacturingSchematicItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManufacturingSchematicItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* IngredientItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IngredientItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueprintEntryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueprintEntryItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InventoryItem_2eproto() {
  protobuf_AddDesc_InventoryItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InventoryItem.proto");
  GOOGLE_CHECK(file != NULL);
  CharacterInventoryItem_descriptor_ = file->message_type(0);
  static const int CharacterInventoryItem_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, appearance_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, crafter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, max_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, containment_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, template_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, portals_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, armor_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, weapon_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, resource_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, factory_crate_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, pharmaceutical_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, crafting_component_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, mfg_schem_details_),
  };
  CharacterInventoryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInventoryItem_descriptor_,
      CharacterInventoryItem::default_instance_,
      CharacterInventoryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInventoryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInventoryItem));
  ArmorItem_descriptor_ = file->message_type(1);
  static const int ArmorItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, kinetic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, electricity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, stun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, blast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, cold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, acid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, lighsaber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, health_encumberance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, action_encumberance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, mind_encumberance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, hit_location_),
  };
  ArmorItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmorItem_descriptor_,
      ArmorItem::default_instance_,
      ArmorItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmorItem));
  WeaponItem_descriptor_ = file->message_type(2);
  static const int WeaponItem_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, point_blank_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, point_blank_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, ideal_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, max_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, ideal_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, max_range_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, armor_piercing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, max_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, min_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, wound_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, damage_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, health_attack_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, action_attack_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, mind_attack_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, force_attack_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, damage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, weapon_type_),
  };
  WeaponItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponItem_descriptor_,
      WeaponItem::default_instance_,
      WeaponItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponItem));
  ResourceContainerItem_descriptor_ = file->message_type(3);
  static const int ResourceContainerItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, attributes_),
  };
  ResourceContainerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceContainerItem_descriptor_,
      ResourceContainerItem::default_instance_,
      ResourceContainerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceContainerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceContainerItem));
  ResourceAttribute_descriptor_ = file->message_type(4);
  static const int ResourceAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAttribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAttribute, value_),
  };
  ResourceAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceAttribute_descriptor_,
      ResourceAttribute::default_instance_,
      ResourceAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceAttribute));
  ResourceSpawnClass_descriptor_ = file->message_type(5);
  static const int ResourceSpawnClass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSpawnClass, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSpawnClass, stf_class_),
  };
  ResourceSpawnClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceSpawnClass_descriptor_,
      ResourceSpawnClass::default_instance_,
      ResourceSpawnClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSpawnClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSpawnClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceSpawnClass));
  FactoryCrateItem_descriptor_ = file->message_type(6);
  static const int FactoryCrateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryCrateItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryCrateItem, max_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryCrateItem, contained_items_),
  };
  FactoryCrateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryCrateItem_descriptor_,
      FactoryCrateItem::default_instance_,
      FactoryCrateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryCrateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryCrateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryCrateItem));
  PharmaceuticalItem_descriptor_ = file->message_type(7);
  static const int PharmaceuticalItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, pharma_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, effectiveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, medicine_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, ranged_stim_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, dot_pack_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, enhance_pack_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, revivie_pack_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, wound_pack_details_),
  };
  PharmaceuticalItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PharmaceuticalItem_descriptor_,
      PharmaceuticalItem::default_instance_,
      PharmaceuticalItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PharmaceuticalItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PharmaceuticalItem));
  PharmaceuticalItem_PharmaceuticalItemType_descriptor_ = PharmaceuticalItem_descriptor_->enum_type(0);
  RangedStimPackItem_descriptor_ = file->message_type(8);
  static const int RangedStimPackItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangedStimPackItem, range_mod_),
  };
  RangedStimPackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangedStimPackItem_descriptor_,
      RangedStimPackItem::default_instance_,
      RangedStimPackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangedStimPackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangedStimPackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangedStimPackItem));
  DotPackItem_descriptor_ = file->message_type(9);
  static const int DotPackItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, potency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, dot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, poison_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, disease_unit_),
  };
  DotPackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotPackItem_descriptor_,
      DotPackItem::default_instance_,
      DotPackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotPackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotPackItem));
  EnhancePackItem_descriptor_ = file->message_type(10);
  static const int EnhancePackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhancePackItem, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhancePackItem, attribute_),
  };
  EnhancePackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnhancePackItem_descriptor_,
      EnhancePackItem::default_instance_,
      EnhancePackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhancePackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhancePackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnhancePackItem));
  RevivePackItem_descriptor_ = file->message_type(11);
  static const int RevivePackItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, health_wound_healed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, health_healed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, action_wound_healed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, action_healed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, mind_wound_healed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, mind_healed_),
  };
  RevivePackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevivePackItem_descriptor_,
      RevivePackItem::default_instance_,
      RevivePackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevivePackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevivePackItem));
  WoundPackItem_descriptor_ = file->message_type(12);
  static const int WoundPackItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WoundPackItem, attribute_),
  };
  WoundPackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WoundPackItem_descriptor_,
      WoundPackItem::default_instance_,
      WoundPackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WoundPackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WoundPackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WoundPackItem));
  CraftingComponentItem_descriptor_ = file->message_type(13);
  static const int CraftingComponentItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentItem, attributes_),
  };
  CraftingComponentItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CraftingComponentItem_descriptor_,
      CraftingComponentItem::default_instance_,
      CraftingComponentItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CraftingComponentItem));
  CraftingComponentAttribute_descriptor_ = file->message_type(14);
  static const int CraftingComponentAttribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, tite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, hidden_),
  };
  CraftingComponentAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CraftingComponentAttribute_descriptor_,
      CraftingComponentAttribute::default_instance_,
      CraftingComponentAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CraftingComponentAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CraftingComponentAttribute));
  ManufacturingSchematicItem_descriptor_ = file->message_type(15);
  static const int ManufacturingSchematicItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, manufacture_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, prototype_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, blueprint_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, ingredients_),
  };
  ManufacturingSchematicItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManufacturingSchematicItem_descriptor_,
      ManufacturingSchematicItem::default_instance_,
      ManufacturingSchematicItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManufacturingSchematicItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManufacturingSchematicItem));
  IngredientItem_descriptor_ = file->message_type(16);
  static const int IngredientItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, required_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, identical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, ingredient_slot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, ingredient_),
  };
  IngredientItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IngredientItem_descriptor_,
      IngredientItem::default_instance_,
      IngredientItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngredientItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IngredientItem));
  BlueprintEntryItem_descriptor_ = file->message_type(17);
  static const int BlueprintEntryItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, identical_),
  };
  BlueprintEntryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlueprintEntryItem_descriptor_,
      BlueprintEntryItem::default_instance_,
      BlueprintEntryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintEntryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlueprintEntryItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InventoryItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInventoryItem_descriptor_, &CharacterInventoryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmorItem_descriptor_, &ArmorItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponItem_descriptor_, &WeaponItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceContainerItem_descriptor_, &ResourceContainerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceAttribute_descriptor_, &ResourceAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceSpawnClass_descriptor_, &ResourceSpawnClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryCrateItem_descriptor_, &FactoryCrateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PharmaceuticalItem_descriptor_, &PharmaceuticalItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangedStimPackItem_descriptor_, &RangedStimPackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotPackItem_descriptor_, &DotPackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnhancePackItem_descriptor_, &EnhancePackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevivePackItem_descriptor_, &RevivePackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WoundPackItem_descriptor_, &WoundPackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CraftingComponentItem_descriptor_, &CraftingComponentItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CraftingComponentAttribute_descriptor_, &CraftingComponentAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManufacturingSchematicItem_descriptor_, &ManufacturingSchematicItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IngredientItem_descriptor_, &IngredientItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlueprintEntryItem_descriptor_, &BlueprintEntryItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InventoryItem_2eproto() {
  delete CharacterInventoryItem::default_instance_;
  delete CharacterInventoryItem_reflection_;
  delete ArmorItem::default_instance_;
  delete ArmorItem_reflection_;
  delete WeaponItem::default_instance_;
  delete WeaponItem_reflection_;
  delete ResourceContainerItem::default_instance_;
  delete ResourceContainerItem_reflection_;
  delete ResourceAttribute::default_instance_;
  delete ResourceAttribute_reflection_;
  delete ResourceSpawnClass::default_instance_;
  delete ResourceSpawnClass_reflection_;
  delete FactoryCrateItem::default_instance_;
  delete FactoryCrateItem_reflection_;
  delete PharmaceuticalItem::default_instance_;
  delete PharmaceuticalItem_reflection_;
  delete RangedStimPackItem::default_instance_;
  delete RangedStimPackItem_reflection_;
  delete DotPackItem::default_instance_;
  delete DotPackItem_reflection_;
  delete EnhancePackItem::default_instance_;
  delete EnhancePackItem_reflection_;
  delete RevivePackItem::default_instance_;
  delete RevivePackItem_reflection_;
  delete WoundPackItem::default_instance_;
  delete WoundPackItem_reflection_;
  delete CraftingComponentItem::default_instance_;
  delete CraftingComponentItem_reflection_;
  delete CraftingComponentAttribute::default_instance_;
  delete CraftingComponentAttribute_reflection_;
  delete ManufacturingSchematicItem::default_instance_;
  delete ManufacturingSchematicItem_reflection_;
  delete IngredientItem::default_instance_;
  delete IngredientItem_reflection_;
  delete BlueprintEntryItem::default_instance_;
  delete BlueprintEntryItem_reflection_;
}

void protobuf_AddDesc_InventoryItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023InventoryItem.proto\022\023swgemurpcserver.r"
    "pc\"\226\006\n\026CharacterInventoryItem\022\021\n\tobject_"
    "id\030\001 \002(\006\022\034\n\024appearance_file_name\030\002 \002(\t\022\023"
    "\n\013object_name\030\003 \002(\t\022\024\n\014display_name\030\004 \002("
    "\t\022\023\n\013description\030\005 \002(\t\022\024\n\014crafter_name\030\006"
    " \002(\t\022\025\n\rserial_number\030\007 \002(\t\022\025\n\rmax_condi"
    "tion\030\010 \001(\005\022\021\n\tcondition\030\t \001(\005\022\034\n\024contain"
    "ment_location\030\n \001(\007\022\032\n\022template_file_nam"
    "e\030\013 \001(\t\022\031\n\021portals_file_name\030\014 \001(\t\0225\n\rar"
    "mor_details\030\r \001(\0132\036.swgemurpcserver.rpc."
    "ArmorItem\0227\n\016weapon_details\030\016 \001(\0132\037.swge"
    "murpcserver.rpc.WeaponItem\022D\n\020resource_d"
    "etails\030\017 \001(\0132*.swgemurpcserver.rpc.Resou"
    "rceContainerItem\022D\n\025factory_crate_detail"
    "s\030\020 \001(\0132%.swgemurpcserver.rpc.FactoryCra"
    "teItem\022G\n\026pharmaceutical_details\030\021 \001(\0132\'"
    ".swgemurpcserver.rpc.PharmaceuticalItem\022"
    "N\n\032crafting_component_details\030\022 \001(\0132*.sw"
    "gemurpcserver.rpc.CraftingComponentItem\022"
    "J\n\021mfg_schem_details\030\023 \001(\0132/.swgemurpcse"
    "rver.rpc.ManufacturingSchematicItem\"\232\002\n\t"
    "ArmorItem\022\017\n\007kinetic\030\001 \002(\002\022\016\n\006energy\030\002 \002"
    "(\002\022\023\n\013electricity\030\003 \002(\002\022\014\n\004stun\030\004 \002(\002\022\r\n"
    "\005blast\030\005 \002(\002\022\014\n\004heat\030\006 \002(\002\022\014\n\004cold\030\007 \002(\002"
    "\022\014\n\004acid\030\010 \002(\002\022\021\n\tlighsaber\030\t \002(\002\022\033\n\023hea"
    "lth_encumberance\030\n \002(\005\022\033\n\023action_encumbe"
    "rance\030\013 \002(\005\022\031\n\021mind_encumberance\030\014 \002(\005\022\016"
    "\n\006rating\030\r \002(\005\022\030\n\014hit_location\030\016 \003(\005B\002\020\001"
    "\"\272\003\n\nWeaponItem\022\034\n\024point_blank_accuracy\030"
    "\001 \002(\005\022\031\n\021point_blank_range\030\002 \002(\005\022\023\n\013idea"
    "l_range\030\003 \002(\005\022\021\n\tmax_range\030\004 \002(\005\022\026\n\016idea"
    "l_accuracy\030\005 \002(\005\022\032\n\022max_range_accuracy\030\006"
    " \002(\005\022\026\n\016armor_piercing\030\007 \002(\005\022\024\n\014attack_s"
    "peed\030\010 \002(\002\022\022\n\nmax_damage\030\t \002(\002\022\022\n\nmin_da"
    "mage\030\n \002(\002\022\023\n\013wound_ratio\030\013 \002(\002\022\025\n\rdamag"
    "e_radius\030\014 \002(\002\022\032\n\022health_attack_cost\030\r \002"
    "(\005\022\032\n\022action_attack_cost\030\016 \002(\005\022\030\n\020mind_a"
    "ttack_cost\030\017 \002(\005\022\031\n\021force_attack_cost\030\020 "
    "\002(\005\022\023\n\013damage_type\030\021 \002(\005\022\023\n\013weapon_type\030"
    "\022 \002(\t\"\315\001\n\025ResourceContainerItem\022\014\n\004name\030"
    "\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\023\n\013resource_id\030\003 \002(\006"
    "\022\r\n\005count\030\004 \002(\005\0228\n\007classes\030\005 \003(\0132\'.swgem"
    "urpcserver.rpc.ResourceSpawnClass\022:\n\natt"
    "ributes\030\006 \003(\0132&.swgemurpcserver.rpc.Reso"
    "urceAttribute\"0\n\021ResourceAttribute\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\005\";\n\022ResourceSpawn"
    "Class\022\022\n\nclass_name\030\001 \002(\t\022\021\n\tstf_class\030\002"
    " \002(\t\"z\n\020FactoryCrateItem\022\r\n\005count\030\001 \002(\005\022"
    "\021\n\tmax_items\030\002 \002(\005\022D\n\017contained_items\030\003 "
    "\002(\0132+.swgemurpcserver.rpc.CharacterInven"
    "toryItem\"\244\005\n\022PharmaceuticalItem\022S\n\013pharm"
    "a_type\030\001 \002(\0162>.swgemurpcserver.rpc.Pharm"
    "aceuticalItem.PharmaceuticalItemType\022\025\n\r"
    "effectiveness\030\002 \002(\002\022\014\n\004area\030\003 \002(\002\022\031\n\021med"
    "icine_required\030\004 \002(\005\022\021\n\tuse_count\030\005 \002(\005\022"
    "D\n\023ranged_stim_details\030\006 \001(\0132\'.swgemurpc"
    "server.rpc.RangedStimPackItem\022:\n\020dot_pac"
    "k_details\030\007 \001(\0132 .swgemurpcserver.rpc.Do"
    "tPackItem\022B\n\024enhance_pack_details\030\010 \001(\0132"
    "$.swgemurpcserver.rpc.EnhancePackItem\022A\n"
    "\024revivie_pack_details\030\t \001(\0132#.swgemurpcs"
    "erver.rpc.RevivePackItem\022>\n\022wound_pack_d"
    "etails\030\n \001(\0132\".swgemurpcserver.rpc.Wound"
    "PackItem\"\234\001\n\026PharmaceuticalItemType\022\024\n\007U"
    "NKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010CUREPACK\020\000\022\013\n\007DOTPA"
    "CK\020\001\022\017\n\013ENHANCEPACK\020\002\022\022\n\016RANGEDSTIMPACK\020"
    "\003\022\017\n\013REVIVIEPACK\020\004\022\014\n\010STIMPACK\020\005\022\r\n\tWOUN"
    "DPACK\020\006\"\'\n\022RangedStimPackItem\022\021\n\trange_m"
    "od\030\001 \002(\002\"{\n\013DotPackItem\022\017\n\007potency\030\001 \002(\002"
    "\022\020\n\010duration\030\002 \002(\007\022\014\n\004pool\030\003 \002(\t\022\020\n\010dot_"
    "type\030\004 \002(\007\022\023\n\013poison_unit\030\005 \002(\010\022\024\n\014disea"
    "se_unit\030\006 \002(\010\"6\n\017EnhancePackItem\022\020\n\010dura"
    "tion\030\001 \002(\002\022\021\n\tattribute\030\002 \002(\t\"\250\001\n\016Revive"
    "PackItem\022\033\n\023health_wound_healed\030\001 \002(\002\022\025\n"
    "\rhealth_healed\030\002 \002(\002\022\033\n\023action_wound_hea"
    "led\030\003 \002(\002\022\025\n\raction_healed\030\004 \002(\002\022\031\n\021mind"
    "_wound_healed\030\005 \002(\002\022\023\n\013mind_healed\030\006 \002(\002"
    "\"\"\n\rWoundPackItem\022\021\n\tattribute\030\001 \002(\t\"\\\n\025"
    "CraftingComponentItem\022C\n\nattributes\030\001 \003("
    "\0132/.swgemurpcserver.rpc.CraftingComponen"
    "tAttribute\"h\n\032CraftingComponentAttribute"
    "\022\n\n\002id\030\001 \002(\t\022\014\n\004tite\030\002 \002(\t\022\021\n\tprecision\030"
    "\003 \002(\005\022\r\n\005value\030\004 \002(\002\022\016\n\006hidden\030\005 \002(\010\"\375\001\n"
    "\032ManufacturingSchematicItem\022\031\n\021manufactu"
    "re_limit\030\001 \002(\005\022F\n\021prototype_details\030\002 \002("
    "\0132+.swgemurpcserver.rpc.CharacterInvento"
    "ryItem\022B\n\021blueprint_entries\030\003 \003(\0132\'.swge"
    "murpcserver.rpc.BlueprintEntryItem\0228\n\013in"
    "gredients\030\004 \003(\0132#.swgemurpcserver.rpc.In"
    "gredientItem\"\235\001\n\016IngredientItem\022\031\n\021requi"
    "red_quantity\030\001 \002(\005\022\021\n\tidentical\030\002 \002(\010\022\034\n"
    "\024ingredient_slot_name\030\003 \002(\t\022\?\n\ningredien"
    "t\030\004 \002(\0132+.swgemurpcserver.rpc.CharacterI"
    "nventoryItem\"z\n\022BlueprintEntryItem\022\014\n\004ty"
    "pe\030\001 \002(\t\022\013\n\003key\030\002 \002(\t\022\016\n\006serial\030\003 \002(\t\022\024\n"
    "\014display_name\030\004 \002(\t\022\020\n\010quantity\030\005 \002(\005\022\021\n"
    "\tidentical\030\006 \002(\010", 3856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InventoryItem.proto", &protobuf_RegisterTypes);
  CharacterInventoryItem::default_instance_ = new CharacterInventoryItem();
  ArmorItem::default_instance_ = new ArmorItem();
  WeaponItem::default_instance_ = new WeaponItem();
  ResourceContainerItem::default_instance_ = new ResourceContainerItem();
  ResourceAttribute::default_instance_ = new ResourceAttribute();
  ResourceSpawnClass::default_instance_ = new ResourceSpawnClass();
  FactoryCrateItem::default_instance_ = new FactoryCrateItem();
  PharmaceuticalItem::default_instance_ = new PharmaceuticalItem();
  RangedStimPackItem::default_instance_ = new RangedStimPackItem();
  DotPackItem::default_instance_ = new DotPackItem();
  EnhancePackItem::default_instance_ = new EnhancePackItem();
  RevivePackItem::default_instance_ = new RevivePackItem();
  WoundPackItem::default_instance_ = new WoundPackItem();
  CraftingComponentItem::default_instance_ = new CraftingComponentItem();
  CraftingComponentAttribute::default_instance_ = new CraftingComponentAttribute();
  ManufacturingSchematicItem::default_instance_ = new ManufacturingSchematicItem();
  IngredientItem::default_instance_ = new IngredientItem();
  BlueprintEntryItem::default_instance_ = new BlueprintEntryItem();
  CharacterInventoryItem::default_instance_->InitAsDefaultInstance();
  ArmorItem::default_instance_->InitAsDefaultInstance();
  WeaponItem::default_instance_->InitAsDefaultInstance();
  ResourceContainerItem::default_instance_->InitAsDefaultInstance();
  ResourceAttribute::default_instance_->InitAsDefaultInstance();
  ResourceSpawnClass::default_instance_->InitAsDefaultInstance();
  FactoryCrateItem::default_instance_->InitAsDefaultInstance();
  PharmaceuticalItem::default_instance_->InitAsDefaultInstance();
  RangedStimPackItem::default_instance_->InitAsDefaultInstance();
  DotPackItem::default_instance_->InitAsDefaultInstance();
  EnhancePackItem::default_instance_->InitAsDefaultInstance();
  RevivePackItem::default_instance_->InitAsDefaultInstance();
  WoundPackItem::default_instance_->InitAsDefaultInstance();
  CraftingComponentItem::default_instance_->InitAsDefaultInstance();
  CraftingComponentAttribute::default_instance_->InitAsDefaultInstance();
  ManufacturingSchematicItem::default_instance_->InitAsDefaultInstance();
  IngredientItem::default_instance_->InitAsDefaultInstance();
  BlueprintEntryItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InventoryItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InventoryItem_2eproto {
  StaticDescriptorInitializer_InventoryItem_2eproto() {
    protobuf_AddDesc_InventoryItem_2eproto();
  }
} static_descriptor_initializer_InventoryItem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharacterInventoryItem::kObjectIdFieldNumber;
const int CharacterInventoryItem::kAppearanceFileNameFieldNumber;
const int CharacterInventoryItem::kObjectNameFieldNumber;
const int CharacterInventoryItem::kDisplayNameFieldNumber;
const int CharacterInventoryItem::kDescriptionFieldNumber;
const int CharacterInventoryItem::kCrafterNameFieldNumber;
const int CharacterInventoryItem::kSerialNumberFieldNumber;
const int CharacterInventoryItem::kMaxConditionFieldNumber;
const int CharacterInventoryItem::kConditionFieldNumber;
const int CharacterInventoryItem::kContainmentLocationFieldNumber;
const int CharacterInventoryItem::kTemplateFileNameFieldNumber;
const int CharacterInventoryItem::kPortalsFileNameFieldNumber;
const int CharacterInventoryItem::kArmorDetailsFieldNumber;
const int CharacterInventoryItem::kWeaponDetailsFieldNumber;
const int CharacterInventoryItem::kResourceDetailsFieldNumber;
const int CharacterInventoryItem::kFactoryCrateDetailsFieldNumber;
const int CharacterInventoryItem::kPharmaceuticalDetailsFieldNumber;
const int CharacterInventoryItem::kCraftingComponentDetailsFieldNumber;
const int CharacterInventoryItem::kMfgSchemDetailsFieldNumber;
#endif  // !_MSC_VER

CharacterInventoryItem::CharacterInventoryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterInventoryItem::InitAsDefaultInstance() {
  armor_details_ = const_cast< ::swgemurpcserver::rpc::ArmorItem*>(&::swgemurpcserver::rpc::ArmorItem::default_instance());
  weapon_details_ = const_cast< ::swgemurpcserver::rpc::WeaponItem*>(&::swgemurpcserver::rpc::WeaponItem::default_instance());
  resource_details_ = const_cast< ::swgemurpcserver::rpc::ResourceContainerItem*>(&::swgemurpcserver::rpc::ResourceContainerItem::default_instance());
  factory_crate_details_ = const_cast< ::swgemurpcserver::rpc::FactoryCrateItem*>(&::swgemurpcserver::rpc::FactoryCrateItem::default_instance());
  pharmaceutical_details_ = const_cast< ::swgemurpcserver::rpc::PharmaceuticalItem*>(&::swgemurpcserver::rpc::PharmaceuticalItem::default_instance());
  crafting_component_details_ = const_cast< ::swgemurpcserver::rpc::CraftingComponentItem*>(&::swgemurpcserver::rpc::CraftingComponentItem::default_instance());
  mfg_schem_details_ = const_cast< ::swgemurpcserver::rpc::ManufacturingSchematicItem*>(&::swgemurpcserver::rpc::ManufacturingSchematicItem::default_instance());
}

CharacterInventoryItem::CharacterInventoryItem(const CharacterInventoryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterInventoryItem::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  appearance_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crafter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_condition_ = 0;
  condition_ = 0;
  containment_location_ = 0u;
  template_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portals_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  armor_details_ = NULL;
  weapon_details_ = NULL;
  resource_details_ = NULL;
  factory_crate_details_ = NULL;
  pharmaceutical_details_ = NULL;
  crafting_component_details_ = NULL;
  mfg_schem_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInventoryItem::~CharacterInventoryItem() {
  SharedDtor();
}

void CharacterInventoryItem::SharedDtor() {
  if (appearance_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete appearance_file_name_;
  }
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (crafter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete crafter_name_;
  }
  if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_number_;
  }
  if (template_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete template_file_name_;
  }
  if (portals_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete portals_file_name_;
  }
  if (this != default_instance_) {
    delete armor_details_;
    delete weapon_details_;
    delete resource_details_;
    delete factory_crate_details_;
    delete pharmaceutical_details_;
    delete crafting_component_details_;
    delete mfg_schem_details_;
  }
}

void CharacterInventoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInventoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInventoryItem_descriptor_;
}

const CharacterInventoryItem& CharacterInventoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

CharacterInventoryItem* CharacterInventoryItem::default_instance_ = NULL;

CharacterInventoryItem* CharacterInventoryItem::New() const {
  return new CharacterInventoryItem;
}

void CharacterInventoryItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_appearance_file_name()) {
      if (appearance_file_name_ != &::google::protobuf::internal::kEmptyString) {
        appearance_file_name_->clear();
      }
    }
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_crafter_name()) {
      if (crafter_name_ != &::google::protobuf::internal::kEmptyString) {
        crafter_name_->clear();
      }
    }
    if (has_serial_number()) {
      if (serial_number_ != &::google::protobuf::internal::kEmptyString) {
        serial_number_->clear();
      }
    }
    max_condition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    condition_ = 0;
    containment_location_ = 0u;
    if (has_template_file_name()) {
      if (template_file_name_ != &::google::protobuf::internal::kEmptyString) {
        template_file_name_->clear();
      }
    }
    if (has_portals_file_name()) {
      if (portals_file_name_ != &::google::protobuf::internal::kEmptyString) {
        portals_file_name_->clear();
      }
    }
    if (has_armor_details()) {
      if (armor_details_ != NULL) armor_details_->::swgemurpcserver::rpc::ArmorItem::Clear();
    }
    if (has_weapon_details()) {
      if (weapon_details_ != NULL) weapon_details_->::swgemurpcserver::rpc::WeaponItem::Clear();
    }
    if (has_resource_details()) {
      if (resource_details_ != NULL) resource_details_->::swgemurpcserver::rpc::ResourceContainerItem::Clear();
    }
    if (has_factory_crate_details()) {
      if (factory_crate_details_ != NULL) factory_crate_details_->::swgemurpcserver::rpc::FactoryCrateItem::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_pharmaceutical_details()) {
      if (pharmaceutical_details_ != NULL) pharmaceutical_details_->::swgemurpcserver::rpc::PharmaceuticalItem::Clear();
    }
    if (has_crafting_component_details()) {
      if (crafting_component_details_ != NULL) crafting_component_details_->::swgemurpcserver::rpc::CraftingComponentItem::Clear();
    }
    if (has_mfg_schem_details()) {
      if (mfg_schem_details_ != NULL) mfg_schem_details_->::swgemurpcserver::rpc::ManufacturingSchematicItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInventoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appearance_file_name;
        break;
      }

      // required string appearance_file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appearance_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appearance_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appearance_file_name().data(), this->appearance_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object_name;
        break;
      }

      // required string object_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_display_name;
        break;
      }

      // required string display_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // required string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_crafter_name;
        break;
      }

      // required string crafter_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crafter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crafter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crafter_name().data(), this->crafter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serial_number;
        break;
      }

      // required string serial_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_condition;
        break;
      }

      // optional int32 max_condition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_condition_)));
          set_has_max_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_condition;
        break;
      }

      // optional int32 condition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_containment_location;
        break;
      }

      // optional fixed32 containment_location = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_containment_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &containment_location_)));
          set_has_containment_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_template_file_name;
        break;
      }

      // optional string template_file_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->template_file_name().data(), this->template_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_portals_file_name;
        break;
      }

      // optional string portals_file_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portals_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portals_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portals_file_name().data(), this->portals_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_armor_details;
        break;
      }

      // optional .swgemurpcserver.rpc.ArmorItem armor_details = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_weapon_details;
        break;
      }

      // optional .swgemurpcserver.rpc.WeaponItem weapon_details = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_resource_details;
        break;
      }

      // optional .swgemurpcserver.rpc.ResourceContainerItem resource_details = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_factory_crate_details;
        break;
      }

      // optional .swgemurpcserver.rpc.FactoryCrateItem factory_crate_details = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factory_crate_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factory_crate_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_pharmaceutical_details;
        break;
      }

      // optional .swgemurpcserver.rpc.PharmaceuticalItem pharmaceutical_details = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pharmaceutical_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pharmaceutical_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_crafting_component_details;
        break;
      }

      // optional .swgemurpcserver.rpc.CraftingComponentItem crafting_component_details = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crafting_component_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crafting_component_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mfg_schem_details;
        break;
      }

      // optional .swgemurpcserver.rpc.ManufacturingSchematicItem mfg_schem_details = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mfg_schem_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mfg_schem_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterInventoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // required string appearance_file_name = 2;
  if (has_appearance_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file_name().data(), this->appearance_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appearance_file_name(), output);
  }

  // required string object_name = 3;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->object_name(), output);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->display_name(), output);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }

  // required string crafter_name = 6;
  if (has_crafter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crafter_name().data(), this->crafter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->crafter_name(), output);
  }

  // required string serial_number = 7;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->serial_number(), output);
  }

  // optional int32 max_condition = 8;
  if (has_max_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_condition(), output);
  }

  // optional int32 condition = 9;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->condition(), output);
  }

  // optional fixed32 containment_location = 10;
  if (has_containment_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->containment_location(), output);
  }

  // optional string template_file_name = 11;
  if (has_template_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file_name().data(), this->template_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->template_file_name(), output);
  }

  // optional string portals_file_name = 12;
  if (has_portals_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portals_file_name().data(), this->portals_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->portals_file_name(), output);
  }

  // optional .swgemurpcserver.rpc.ArmorItem armor_details = 13;
  if (has_armor_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->armor_details(), output);
  }

  // optional .swgemurpcserver.rpc.WeaponItem weapon_details = 14;
  if (has_weapon_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->weapon_details(), output);
  }

  // optional .swgemurpcserver.rpc.ResourceContainerItem resource_details = 15;
  if (has_resource_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->resource_details(), output);
  }

  // optional .swgemurpcserver.rpc.FactoryCrateItem factory_crate_details = 16;
  if (has_factory_crate_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->factory_crate_details(), output);
  }

  // optional .swgemurpcserver.rpc.PharmaceuticalItem pharmaceutical_details = 17;
  if (has_pharmaceutical_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->pharmaceutical_details(), output);
  }

  // optional .swgemurpcserver.rpc.CraftingComponentItem crafting_component_details = 18;
  if (has_crafting_component_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->crafting_component_details(), output);
  }

  // optional .swgemurpcserver.rpc.ManufacturingSchematicItem mfg_schem_details = 19;
  if (has_mfg_schem_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mfg_schem_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterInventoryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // required string appearance_file_name = 2;
  if (has_appearance_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file_name().data(), this->appearance_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appearance_file_name(), target);
  }

  // required string object_name = 3;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object_name(), target);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_name(), target);
  }

  // required string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // required string crafter_name = 6;
  if (has_crafter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crafter_name().data(), this->crafter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->crafter_name(), target);
  }

  // required string serial_number = 7;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial_number(), target);
  }

  // optional int32 max_condition = 8;
  if (has_max_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_condition(), target);
  }

  // optional int32 condition = 9;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->condition(), target);
  }

  // optional fixed32 containment_location = 10;
  if (has_containment_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->containment_location(), target);
  }

  // optional string template_file_name = 11;
  if (has_template_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_file_name().data(), this->template_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->template_file_name(), target);
  }

  // optional string portals_file_name = 12;
  if (has_portals_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portals_file_name().data(), this->portals_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->portals_file_name(), target);
  }

  // optional .swgemurpcserver.rpc.ArmorItem armor_details = 13;
  if (has_armor_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->armor_details(), target);
  }

  // optional .swgemurpcserver.rpc.WeaponItem weapon_details = 14;
  if (has_weapon_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->weapon_details(), target);
  }

  // optional .swgemurpcserver.rpc.ResourceContainerItem resource_details = 15;
  if (has_resource_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->resource_details(), target);
  }

  // optional .swgemurpcserver.rpc.FactoryCrateItem factory_crate_details = 16;
  if (has_factory_crate_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->factory_crate_details(), target);
  }

  // optional .swgemurpcserver.rpc.PharmaceuticalItem pharmaceutical_details = 17;
  if (has_pharmaceutical_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->pharmaceutical_details(), target);
  }

  // optional .swgemurpcserver.rpc.CraftingComponentItem crafting_component_details = 18;
  if (has_crafting_component_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->crafting_component_details(), target);
  }

  // optional .swgemurpcserver.rpc.ManufacturingSchematicItem mfg_schem_details = 19;
  if (has_mfg_schem_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mfg_schem_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterInventoryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // required string appearance_file_name = 2;
    if (has_appearance_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appearance_file_name());
    }

    // required string object_name = 3;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }

    // required string display_name = 4;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string crafter_name = 6;
    if (has_crafter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crafter_name());
    }

    // required string serial_number = 7;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional int32 max_condition = 8;
    if (has_max_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_condition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 condition = 9;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional fixed32 containment_location = 10;
    if (has_containment_location()) {
      total_size += 1 + 4;
    }

    // optional string template_file_name = 11;
    if (has_template_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_file_name());
    }

    // optional string portals_file_name = 12;
    if (has_portals_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portals_file_name());
    }

    // optional .swgemurpcserver.rpc.ArmorItem armor_details = 13;
    if (has_armor_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor_details());
    }

    // optional .swgemurpcserver.rpc.WeaponItem weapon_details = 14;
    if (has_weapon_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_details());
    }

    // optional .swgemurpcserver.rpc.ResourceContainerItem resource_details = 15;
    if (has_resource_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_details());
    }

    // optional .swgemurpcserver.rpc.FactoryCrateItem factory_crate_details = 16;
    if (has_factory_crate_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->factory_crate_details());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .swgemurpcserver.rpc.PharmaceuticalItem pharmaceutical_details = 17;
    if (has_pharmaceutical_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pharmaceutical_details());
    }

    // optional .swgemurpcserver.rpc.CraftingComponentItem crafting_component_details = 18;
    if (has_crafting_component_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crafting_component_details());
    }

    // optional .swgemurpcserver.rpc.ManufacturingSchematicItem mfg_schem_details = 19;
    if (has_mfg_schem_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mfg_schem_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInventoryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInventoryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInventoryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInventoryItem::MergeFrom(const CharacterInventoryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_appearance_file_name()) {
      set_appearance_file_name(from.appearance_file_name());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_crafter_name()) {
      set_crafter_name(from.crafter_name());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_max_condition()) {
      set_max_condition(from.max_condition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_containment_location()) {
      set_containment_location(from.containment_location());
    }
    if (from.has_template_file_name()) {
      set_template_file_name(from.template_file_name());
    }
    if (from.has_portals_file_name()) {
      set_portals_file_name(from.portals_file_name());
    }
    if (from.has_armor_details()) {
      mutable_armor_details()->::swgemurpcserver::rpc::ArmorItem::MergeFrom(from.armor_details());
    }
    if (from.has_weapon_details()) {
      mutable_weapon_details()->::swgemurpcserver::rpc::WeaponItem::MergeFrom(from.weapon_details());
    }
    if (from.has_resource_details()) {
      mutable_resource_details()->::swgemurpcserver::rpc::ResourceContainerItem::MergeFrom(from.resource_details());
    }
    if (from.has_factory_crate_details()) {
      mutable_factory_crate_details()->::swgemurpcserver::rpc::FactoryCrateItem::MergeFrom(from.factory_crate_details());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pharmaceutical_details()) {
      mutable_pharmaceutical_details()->::swgemurpcserver::rpc::PharmaceuticalItem::MergeFrom(from.pharmaceutical_details());
    }
    if (from.has_crafting_component_details()) {
      mutable_crafting_component_details()->::swgemurpcserver::rpc::CraftingComponentItem::MergeFrom(from.crafting_component_details());
    }
    if (from.has_mfg_schem_details()) {
      mutable_mfg_schem_details()->::swgemurpcserver::rpc::ManufacturingSchematicItem::MergeFrom(from.mfg_schem_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInventoryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInventoryItem::CopyFrom(const CharacterInventoryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInventoryItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_armor_details()) {
    if (!this->armor_details().IsInitialized()) return false;
  }
  if (has_weapon_details()) {
    if (!this->weapon_details().IsInitialized()) return false;
  }
  if (has_resource_details()) {
    if (!this->resource_details().IsInitialized()) return false;
  }
  if (has_factory_crate_details()) {
    if (!this->factory_crate_details().IsInitialized()) return false;
  }
  if (has_pharmaceutical_details()) {
    if (!this->pharmaceutical_details().IsInitialized()) return false;
  }
  if (has_crafting_component_details()) {
    if (!this->crafting_component_details().IsInitialized()) return false;
  }
  if (has_mfg_schem_details()) {
    if (!this->mfg_schem_details().IsInitialized()) return false;
  }
  return true;
}

void CharacterInventoryItem::Swap(CharacterInventoryItem* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(appearance_file_name_, other->appearance_file_name_);
    std::swap(object_name_, other->object_name_);
    std::swap(display_name_, other->display_name_);
    std::swap(description_, other->description_);
    std::swap(crafter_name_, other->crafter_name_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(max_condition_, other->max_condition_);
    std::swap(condition_, other->condition_);
    std::swap(containment_location_, other->containment_location_);
    std::swap(template_file_name_, other->template_file_name_);
    std::swap(portals_file_name_, other->portals_file_name_);
    std::swap(armor_details_, other->armor_details_);
    std::swap(weapon_details_, other->weapon_details_);
    std::swap(resource_details_, other->resource_details_);
    std::swap(factory_crate_details_, other->factory_crate_details_);
    std::swap(pharmaceutical_details_, other->pharmaceutical_details_);
    std::swap(crafting_component_details_, other->crafting_component_details_);
    std::swap(mfg_schem_details_, other->mfg_schem_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInventoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInventoryItem_descriptor_;
  metadata.reflection = CharacterInventoryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorItem::kKineticFieldNumber;
const int ArmorItem::kEnergyFieldNumber;
const int ArmorItem::kElectricityFieldNumber;
const int ArmorItem::kStunFieldNumber;
const int ArmorItem::kBlastFieldNumber;
const int ArmorItem::kHeatFieldNumber;
const int ArmorItem::kColdFieldNumber;
const int ArmorItem::kAcidFieldNumber;
const int ArmorItem::kLighsaberFieldNumber;
const int ArmorItem::kHealthEncumberanceFieldNumber;
const int ArmorItem::kActionEncumberanceFieldNumber;
const int ArmorItem::kMindEncumberanceFieldNumber;
const int ArmorItem::kRatingFieldNumber;
const int ArmorItem::kHitLocationFieldNumber;
#endif  // !_MSC_VER

ArmorItem::ArmorItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmorItem::InitAsDefaultInstance() {
}

ArmorItem::ArmorItem(const ArmorItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmorItem::SharedCtor() {
  _cached_size_ = 0;
  kinetic_ = 0;
  energy_ = 0;
  electricity_ = 0;
  stun_ = 0;
  blast_ = 0;
  heat_ = 0;
  cold_ = 0;
  acid_ = 0;
  lighsaber_ = 0;
  health_encumberance_ = 0;
  action_encumberance_ = 0;
  mind_encumberance_ = 0;
  rating_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorItem::~ArmorItem() {
  SharedDtor();
}

void ArmorItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorItem_descriptor_;
}

const ArmorItem& ArmorItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

ArmorItem* ArmorItem::default_instance_ = NULL;

ArmorItem* ArmorItem::New() const {
  return new ArmorItem;
}

void ArmorItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kinetic_ = 0;
    energy_ = 0;
    electricity_ = 0;
    stun_ = 0;
    blast_ = 0;
    heat_ = 0;
    cold_ = 0;
    acid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lighsaber_ = 0;
    health_encumberance_ = 0;
    action_encumberance_ = 0;
    mind_encumberance_ = 0;
    rating_ = 0;
  }
  hit_location_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmorItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float kinetic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kinetic_)));
          set_has_kinetic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_energy;
        break;
      }

      // required float energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_electricity;
        break;
      }

      // required float electricity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_electricity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &electricity_)));
          set_has_electricity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_stun;
        break;
      }

      // required float stun = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stun_)));
          set_has_stun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_blast;
        break;
      }

      // required float blast = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blast_)));
          set_has_blast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_heat;
        break;
      }

      // required float heat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heat_)));
          set_has_heat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_cold;
        break;
      }

      // required float cold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cold_)));
          set_has_cold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_acid;
        break;
      }

      // required float acid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acid_)));
          set_has_acid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_lighsaber;
        break;
      }

      // required float lighsaber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lighsaber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lighsaber_)));
          set_has_lighsaber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_health_encumberance;
        break;
      }

      // required int32 health_encumberance = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_encumberance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_encumberance_)));
          set_has_health_encumberance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_action_encumberance;
        break;
      }

      // required int32 action_encumberance = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_encumberance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_encumberance_)));
          set_has_action_encumberance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mind_encumberance;
        break;
      }

      // required int32 mind_encumberance = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mind_encumberance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mind_encumberance_)));
          set_has_mind_encumberance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rating;
        break;
      }

      // required int32 rating = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hit_location;
        break;
      }

      // repeated int32 hit_location = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hit_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hit_location())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 114, input, this->mutable_hit_location())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmorItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float kinetic = 1;
  if (has_kinetic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kinetic(), output);
  }

  // required float energy = 2;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->energy(), output);
  }

  // required float electricity = 3;
  if (has_electricity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->electricity(), output);
  }

  // required float stun = 4;
  if (has_stun()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stun(), output);
  }

  // required float blast = 5;
  if (has_blast()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->blast(), output);
  }

  // required float heat = 6;
  if (has_heat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->heat(), output);
  }

  // required float cold = 7;
  if (has_cold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cold(), output);
  }

  // required float acid = 8;
  if (has_acid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->acid(), output);
  }

  // required float lighsaber = 9;
  if (has_lighsaber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lighsaber(), output);
  }

  // required int32 health_encumberance = 10;
  if (has_health_encumberance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->health_encumberance(), output);
  }

  // required int32 action_encumberance = 11;
  if (has_action_encumberance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->action_encumberance(), output);
  }

  // required int32 mind_encumberance = 12;
  if (has_mind_encumberance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mind_encumberance(), output);
  }

  // required int32 rating = 13;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rating(), output);
  }

  // repeated int32 hit_location = 14 [packed = true];
  if (this->hit_location_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hit_location_cached_byte_size_);
  }
  for (int i = 0; i < this->hit_location_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hit_location(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmorItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float kinetic = 1;
  if (has_kinetic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->kinetic(), target);
  }

  // required float energy = 2;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->energy(), target);
  }

  // required float electricity = 3;
  if (has_electricity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->electricity(), target);
  }

  // required float stun = 4;
  if (has_stun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stun(), target);
  }

  // required float blast = 5;
  if (has_blast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->blast(), target);
  }

  // required float heat = 6;
  if (has_heat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->heat(), target);
  }

  // required float cold = 7;
  if (has_cold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cold(), target);
  }

  // required float acid = 8;
  if (has_acid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->acid(), target);
  }

  // required float lighsaber = 9;
  if (has_lighsaber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lighsaber(), target);
  }

  // required int32 health_encumberance = 10;
  if (has_health_encumberance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->health_encumberance(), target);
  }

  // required int32 action_encumberance = 11;
  if (has_action_encumberance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->action_encumberance(), target);
  }

  // required int32 mind_encumberance = 12;
  if (has_mind_encumberance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mind_encumberance(), target);
  }

  // required int32 rating = 13;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rating(), target);
  }

  // repeated int32 hit_location = 14 [packed = true];
  if (this->hit_location_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hit_location_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hit_location_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hit_location(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmorItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float kinetic = 1;
    if (has_kinetic()) {
      total_size += 1 + 4;
    }

    // required float energy = 2;
    if (has_energy()) {
      total_size += 1 + 4;
    }

    // required float electricity = 3;
    if (has_electricity()) {
      total_size += 1 + 4;
    }

    // required float stun = 4;
    if (has_stun()) {
      total_size += 1 + 4;
    }

    // required float blast = 5;
    if (has_blast()) {
      total_size += 1 + 4;
    }

    // required float heat = 6;
    if (has_heat()) {
      total_size += 1 + 4;
    }

    // required float cold = 7;
    if (has_cold()) {
      total_size += 1 + 4;
    }

    // required float acid = 8;
    if (has_acid()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float lighsaber = 9;
    if (has_lighsaber()) {
      total_size += 1 + 4;
    }

    // required int32 health_encumberance = 10;
    if (has_health_encumberance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health_encumberance());
    }

    // required int32 action_encumberance = 11;
    if (has_action_encumberance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_encumberance());
    }

    // required int32 mind_encumberance = 12;
    if (has_mind_encumberance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mind_encumberance());
    }

    // required int32 rating = 13;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rating());
    }

  }
  // repeated int32 hit_location = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->hit_location_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hit_location(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hit_location_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmorItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmorItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmorItem::MergeFrom(const ArmorItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  hit_location_.MergeFrom(from.hit_location_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kinetic()) {
      set_kinetic(from.kinetic());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_electricity()) {
      set_electricity(from.electricity());
    }
    if (from.has_stun()) {
      set_stun(from.stun());
    }
    if (from.has_blast()) {
      set_blast(from.blast());
    }
    if (from.has_heat()) {
      set_heat(from.heat());
    }
    if (from.has_cold()) {
      set_cold(from.cold());
    }
    if (from.has_acid()) {
      set_acid(from.acid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lighsaber()) {
      set_lighsaber(from.lighsaber());
    }
    if (from.has_health_encumberance()) {
      set_health_encumberance(from.health_encumberance());
    }
    if (from.has_action_encumberance()) {
      set_action_encumberance(from.action_encumberance());
    }
    if (from.has_mind_encumberance()) {
      set_mind_encumberance(from.mind_encumberance());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmorItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorItem::CopyFrom(const ArmorItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void ArmorItem::Swap(ArmorItem* other) {
  if (other != this) {
    std::swap(kinetic_, other->kinetic_);
    std::swap(energy_, other->energy_);
    std::swap(electricity_, other->electricity_);
    std::swap(stun_, other->stun_);
    std::swap(blast_, other->blast_);
    std::swap(heat_, other->heat_);
    std::swap(cold_, other->cold_);
    std::swap(acid_, other->acid_);
    std::swap(lighsaber_, other->lighsaber_);
    std::swap(health_encumberance_, other->health_encumberance_);
    std::swap(action_encumberance_, other->action_encumberance_);
    std::swap(mind_encumberance_, other->mind_encumberance_);
    std::swap(rating_, other->rating_);
    hit_location_.Swap(&other->hit_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmorItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorItem_descriptor_;
  metadata.reflection = ArmorItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponItem::kPointBlankAccuracyFieldNumber;
const int WeaponItem::kPointBlankRangeFieldNumber;
const int WeaponItem::kIdealRangeFieldNumber;
const int WeaponItem::kMaxRangeFieldNumber;
const int WeaponItem::kIdealAccuracyFieldNumber;
const int WeaponItem::kMaxRangeAccuracyFieldNumber;
const int WeaponItem::kArmorPiercingFieldNumber;
const int WeaponItem::kAttackSpeedFieldNumber;
const int WeaponItem::kMaxDamageFieldNumber;
const int WeaponItem::kMinDamageFieldNumber;
const int WeaponItem::kWoundRatioFieldNumber;
const int WeaponItem::kDamageRadiusFieldNumber;
const int WeaponItem::kHealthAttackCostFieldNumber;
const int WeaponItem::kActionAttackCostFieldNumber;
const int WeaponItem::kMindAttackCostFieldNumber;
const int WeaponItem::kForceAttackCostFieldNumber;
const int WeaponItem::kDamageTypeFieldNumber;
const int WeaponItem::kWeaponTypeFieldNumber;
#endif  // !_MSC_VER

WeaponItem::WeaponItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponItem::InitAsDefaultInstance() {
}

WeaponItem::WeaponItem(const WeaponItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponItem::SharedCtor() {
  _cached_size_ = 0;
  point_blank_accuracy_ = 0;
  point_blank_range_ = 0;
  ideal_range_ = 0;
  max_range_ = 0;
  ideal_accuracy_ = 0;
  max_range_accuracy_ = 0;
  armor_piercing_ = 0;
  attack_speed_ = 0;
  max_damage_ = 0;
  min_damage_ = 0;
  wound_ratio_ = 0;
  damage_radius_ = 0;
  health_attack_cost_ = 0;
  action_attack_cost_ = 0;
  mind_attack_cost_ = 0;
  force_attack_cost_ = 0;
  damage_type_ = 0;
  weapon_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponItem::~WeaponItem() {
  SharedDtor();
}

void WeaponItem::SharedDtor() {
  if (weapon_type_ != &::google::protobuf::internal::kEmptyString) {
    delete weapon_type_;
  }
  if (this != default_instance_) {
  }
}

void WeaponItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponItem_descriptor_;
}

const WeaponItem& WeaponItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

WeaponItem* WeaponItem::default_instance_ = NULL;

WeaponItem* WeaponItem::New() const {
  return new WeaponItem;
}

void WeaponItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    point_blank_accuracy_ = 0;
    point_blank_range_ = 0;
    ideal_range_ = 0;
    max_range_ = 0;
    ideal_accuracy_ = 0;
    max_range_accuracy_ = 0;
    armor_piercing_ = 0;
    attack_speed_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_damage_ = 0;
    min_damage_ = 0;
    wound_ratio_ = 0;
    damage_radius_ = 0;
    health_attack_cost_ = 0;
    action_attack_cost_ = 0;
    mind_attack_cost_ = 0;
    force_attack_cost_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    damage_type_ = 0;
    if (has_weapon_type()) {
      if (weapon_type_ != &::google::protobuf::internal::kEmptyString) {
        weapon_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 point_blank_accuracy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_blank_accuracy_)));
          set_has_point_blank_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_blank_range;
        break;
      }

      // required int32 point_blank_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_blank_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_blank_range_)));
          set_has_point_blank_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ideal_range;
        break;
      }

      // required int32 ideal_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ideal_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ideal_range_)));
          set_has_ideal_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_range;
        break;
      }

      // required int32 max_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_range_)));
          set_has_max_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ideal_accuracy;
        break;
      }

      // required int32 ideal_accuracy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ideal_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ideal_accuracy_)));
          set_has_ideal_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_range_accuracy;
        break;
      }

      // required int32 max_range_accuracy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_range_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_range_accuracy_)));
          set_has_max_range_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_armor_piercing;
        break;
      }

      // required int32 armor_piercing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_piercing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_piercing_)));
          set_has_armor_piercing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_attack_speed;
        break;
      }

      // required float attack_speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_max_damage;
        break;
      }

      // required float max_damage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_damage_)));
          set_has_max_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_min_damage;
        break;
      }

      // required float min_damage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_damage_)));
          set_has_min_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_wound_ratio;
        break;
      }

      // required float wound_ratio = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wound_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wound_ratio_)));
          set_has_wound_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_damage_radius;
        break;
      }

      // required float damage_radius = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damage_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_radius_)));
          set_has_damage_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_health_attack_cost;
        break;
      }

      // required int32 health_attack_cost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_attack_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_attack_cost_)));
          set_has_health_attack_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_action_attack_cost;
        break;
      }

      // required int32 action_attack_cost = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_attack_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_attack_cost_)));
          set_has_action_attack_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mind_attack_cost;
        break;
      }

      // required int32 mind_attack_cost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mind_attack_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mind_attack_cost_)));
          set_has_mind_attack_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_force_attack_cost;
        break;
      }

      // required int32 force_attack_cost = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_attack_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_attack_cost_)));
          set_has_force_attack_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_damage_type;
        break;
      }

      // required int32 damage_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_type_)));
          set_has_damage_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_weapon_type;
        break;
      }

      // required string weapon_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weapon_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weapon_type().data(), this->weapon_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 point_blank_accuracy = 1;
  if (has_point_blank_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->point_blank_accuracy(), output);
  }

  // required int32 point_blank_range = 2;
  if (has_point_blank_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point_blank_range(), output);
  }

  // required int32 ideal_range = 3;
  if (has_ideal_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ideal_range(), output);
  }

  // required int32 max_range = 4;
  if (has_max_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_range(), output);
  }

  // required int32 ideal_accuracy = 5;
  if (has_ideal_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ideal_accuracy(), output);
  }

  // required int32 max_range_accuracy = 6;
  if (has_max_range_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_range_accuracy(), output);
  }

  // required int32 armor_piercing = 7;
  if (has_armor_piercing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->armor_piercing(), output);
  }

  // required float attack_speed = 8;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->attack_speed(), output);
  }

  // required float max_damage = 9;
  if (has_max_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_damage(), output);
  }

  // required float min_damage = 10;
  if (has_min_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->min_damage(), output);
  }

  // required float wound_ratio = 11;
  if (has_wound_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->wound_ratio(), output);
  }

  // required float damage_radius = 12;
  if (has_damage_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->damage_radius(), output);
  }

  // required int32 health_attack_cost = 13;
  if (has_health_attack_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->health_attack_cost(), output);
  }

  // required int32 action_attack_cost = 14;
  if (has_action_attack_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->action_attack_cost(), output);
  }

  // required int32 mind_attack_cost = 15;
  if (has_mind_attack_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mind_attack_cost(), output);
  }

  // required int32 force_attack_cost = 16;
  if (has_force_attack_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->force_attack_cost(), output);
  }

  // required int32 damage_type = 17;
  if (has_damage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->damage_type(), output);
  }

  // required string weapon_type = 18;
  if (has_weapon_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon_type().data(), this->weapon_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->weapon_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 point_blank_accuracy = 1;
  if (has_point_blank_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->point_blank_accuracy(), target);
  }

  // required int32 point_blank_range = 2;
  if (has_point_blank_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point_blank_range(), target);
  }

  // required int32 ideal_range = 3;
  if (has_ideal_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ideal_range(), target);
  }

  // required int32 max_range = 4;
  if (has_max_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_range(), target);
  }

  // required int32 ideal_accuracy = 5;
  if (has_ideal_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ideal_accuracy(), target);
  }

  // required int32 max_range_accuracy = 6;
  if (has_max_range_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_range_accuracy(), target);
  }

  // required int32 armor_piercing = 7;
  if (has_armor_piercing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->armor_piercing(), target);
  }

  // required float attack_speed = 8;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->attack_speed(), target);
  }

  // required float max_damage = 9;
  if (has_max_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->max_damage(), target);
  }

  // required float min_damage = 10;
  if (has_min_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->min_damage(), target);
  }

  // required float wound_ratio = 11;
  if (has_wound_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->wound_ratio(), target);
  }

  // required float damage_radius = 12;
  if (has_damage_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->damage_radius(), target);
  }

  // required int32 health_attack_cost = 13;
  if (has_health_attack_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->health_attack_cost(), target);
  }

  // required int32 action_attack_cost = 14;
  if (has_action_attack_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->action_attack_cost(), target);
  }

  // required int32 mind_attack_cost = 15;
  if (has_mind_attack_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mind_attack_cost(), target);
  }

  // required int32 force_attack_cost = 16;
  if (has_force_attack_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->force_attack_cost(), target);
  }

  // required int32 damage_type = 17;
  if (has_damage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->damage_type(), target);
  }

  // required string weapon_type = 18;
  if (has_weapon_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weapon_type().data(), this->weapon_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->weapon_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 point_blank_accuracy = 1;
    if (has_point_blank_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point_blank_accuracy());
    }

    // required int32 point_blank_range = 2;
    if (has_point_blank_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point_blank_range());
    }

    // required int32 ideal_range = 3;
    if (has_ideal_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ideal_range());
    }

    // required int32 max_range = 4;
    if (has_max_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_range());
    }

    // required int32 ideal_accuracy = 5;
    if (has_ideal_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ideal_accuracy());
    }

    // required int32 max_range_accuracy = 6;
    if (has_max_range_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_range_accuracy());
    }

    // required int32 armor_piercing = 7;
    if (has_armor_piercing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_piercing());
    }

    // required float attack_speed = 8;
    if (has_attack_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float max_damage = 9;
    if (has_max_damage()) {
      total_size += 1 + 4;
    }

    // required float min_damage = 10;
    if (has_min_damage()) {
      total_size += 1 + 4;
    }

    // required float wound_ratio = 11;
    if (has_wound_ratio()) {
      total_size += 1 + 4;
    }

    // required float damage_radius = 12;
    if (has_damage_radius()) {
      total_size += 1 + 4;
    }

    // required int32 health_attack_cost = 13;
    if (has_health_attack_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health_attack_cost());
    }

    // required int32 action_attack_cost = 14;
    if (has_action_attack_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_attack_cost());
    }

    // required int32 mind_attack_cost = 15;
    if (has_mind_attack_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mind_attack_cost());
    }

    // required int32 force_attack_cost = 16;
    if (has_force_attack_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force_attack_cost());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 damage_type = 17;
    if (has_damage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_type());
    }

    // required string weapon_type = 18;
    if (has_weapon_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weapon_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponItem::MergeFrom(const WeaponItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point_blank_accuracy()) {
      set_point_blank_accuracy(from.point_blank_accuracy());
    }
    if (from.has_point_blank_range()) {
      set_point_blank_range(from.point_blank_range());
    }
    if (from.has_ideal_range()) {
      set_ideal_range(from.ideal_range());
    }
    if (from.has_max_range()) {
      set_max_range(from.max_range());
    }
    if (from.has_ideal_accuracy()) {
      set_ideal_accuracy(from.ideal_accuracy());
    }
    if (from.has_max_range_accuracy()) {
      set_max_range_accuracy(from.max_range_accuracy());
    }
    if (from.has_armor_piercing()) {
      set_armor_piercing(from.armor_piercing());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_damage()) {
      set_max_damage(from.max_damage());
    }
    if (from.has_min_damage()) {
      set_min_damage(from.min_damage());
    }
    if (from.has_wound_ratio()) {
      set_wound_ratio(from.wound_ratio());
    }
    if (from.has_damage_radius()) {
      set_damage_radius(from.damage_radius());
    }
    if (from.has_health_attack_cost()) {
      set_health_attack_cost(from.health_attack_cost());
    }
    if (from.has_action_attack_cost()) {
      set_action_attack_cost(from.action_attack_cost());
    }
    if (from.has_mind_attack_cost()) {
      set_mind_attack_cost(from.mind_attack_cost());
    }
    if (from.has_force_attack_cost()) {
      set_force_attack_cost(from.force_attack_cost());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_damage_type()) {
      set_damage_type(from.damage_type());
    }
    if (from.has_weapon_type()) {
      set_weapon_type(from.weapon_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponItem::CopyFrom(const WeaponItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void WeaponItem::Swap(WeaponItem* other) {
  if (other != this) {
    std::swap(point_blank_accuracy_, other->point_blank_accuracy_);
    std::swap(point_blank_range_, other->point_blank_range_);
    std::swap(ideal_range_, other->ideal_range_);
    std::swap(max_range_, other->max_range_);
    std::swap(ideal_accuracy_, other->ideal_accuracy_);
    std::swap(max_range_accuracy_, other->max_range_accuracy_);
    std::swap(armor_piercing_, other->armor_piercing_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(max_damage_, other->max_damage_);
    std::swap(min_damage_, other->min_damage_);
    std::swap(wound_ratio_, other->wound_ratio_);
    std::swap(damage_radius_, other->damage_radius_);
    std::swap(health_attack_cost_, other->health_attack_cost_);
    std::swap(action_attack_cost_, other->action_attack_cost_);
    std::swap(mind_attack_cost_, other->mind_attack_cost_);
    std::swap(force_attack_cost_, other->force_attack_cost_);
    std::swap(damage_type_, other->damage_type_);
    std::swap(weapon_type_, other->weapon_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponItem_descriptor_;
  metadata.reflection = WeaponItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceContainerItem::kNameFieldNumber;
const int ResourceContainerItem::kTypeFieldNumber;
const int ResourceContainerItem::kResourceIdFieldNumber;
const int ResourceContainerItem::kCountFieldNumber;
const int ResourceContainerItem::kClassesFieldNumber;
const int ResourceContainerItem::kAttributesFieldNumber;
#endif  // !_MSC_VER

ResourceContainerItem::ResourceContainerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceContainerItem::InitAsDefaultInstance() {
}

ResourceContainerItem::ResourceContainerItem(const ResourceContainerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceContainerItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_id_ = GOOGLE_ULONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceContainerItem::~ResourceContainerItem() {
  SharedDtor();
}

void ResourceContainerItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void ResourceContainerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceContainerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceContainerItem_descriptor_;
}

const ResourceContainerItem& ResourceContainerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

ResourceContainerItem* ResourceContainerItem::default_instance_ = NULL;

ResourceContainerItem* ResourceContainerItem::New() const {
  return new ResourceContainerItem;
}

void ResourceContainerItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    resource_id_ = GOOGLE_ULONGLONG(0);
    count_ = 0;
  }
  classes_.Clear();
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceContainerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_resource_id;
        break;
      }

      // required fixed64 resource_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_classes;
        break;
      }

      // repeated .swgemurpcserver.rpc.ResourceSpawnClass classes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_classes;
        if (input->ExpectTag(50)) goto parse_attributes;
        break;
      }

      // repeated .swgemurpcserver.rpc.ResourceAttribute attributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceContainerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required fixed64 resource_id = 3;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->resource_id(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated .swgemurpcserver.rpc.ResourceSpawnClass classes = 5;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->classes(i), output);
  }

  // repeated .swgemurpcserver.rpc.ResourceAttribute attributes = 6;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceContainerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required fixed64 resource_id = 3;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->resource_id(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated .swgemurpcserver.rpc.ResourceSpawnClass classes = 5;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->classes(i), target);
  }

  // repeated .swgemurpcserver.rpc.ResourceAttribute attributes = 6;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceContainerItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required fixed64 resource_id = 3;
    if (has_resource_id()) {
      total_size += 1 + 8;
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .swgemurpcserver.rpc.ResourceSpawnClass classes = 5;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  // repeated .swgemurpcserver.rpc.ResourceAttribute attributes = 6;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceContainerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceContainerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceContainerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceContainerItem::MergeFrom(const ResourceContainerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  classes_.MergeFrom(from.classes_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceContainerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceContainerItem::CopyFrom(const ResourceContainerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContainerItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < classes_size(); i++) {
    if (!this->classes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceContainerItem::Swap(ResourceContainerItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(count_, other->count_);
    classes_.Swap(&other->classes_);
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceContainerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceContainerItem_descriptor_;
  metadata.reflection = ResourceContainerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceAttribute::kNameFieldNumber;
const int ResourceAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

ResourceAttribute::ResourceAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceAttribute::InitAsDefaultInstance() {
}

ResourceAttribute::ResourceAttribute(const ResourceAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceAttribute::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceAttribute::~ResourceAttribute() {
  SharedDtor();
}

void ResourceAttribute::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ResourceAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceAttribute_descriptor_;
}

const ResourceAttribute& ResourceAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

ResourceAttribute* ResourceAttribute::default_instance_ = NULL;

ResourceAttribute* ResourceAttribute::New() const {
  return new ResourceAttribute;
}

void ResourceAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceAttribute::MergeFrom(const ResourceAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceAttribute::CopyFrom(const ResourceAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourceAttribute::Swap(ResourceAttribute* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceAttribute_descriptor_;
  metadata.reflection = ResourceAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceSpawnClass::kClassNameFieldNumber;
const int ResourceSpawnClass::kStfClassFieldNumber;
#endif  // !_MSC_VER

ResourceSpawnClass::ResourceSpawnClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceSpawnClass::InitAsDefaultInstance() {
}

ResourceSpawnClass::ResourceSpawnClass(const ResourceSpawnClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceSpawnClass::SharedCtor() {
  _cached_size_ = 0;
  class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stf_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceSpawnClass::~ResourceSpawnClass() {
  SharedDtor();
}

void ResourceSpawnClass::SharedDtor() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (stf_class_ != &::google::protobuf::internal::kEmptyString) {
    delete stf_class_;
  }
  if (this != default_instance_) {
  }
}

void ResourceSpawnClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceSpawnClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceSpawnClass_descriptor_;
}

const ResourceSpawnClass& ResourceSpawnClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

ResourceSpawnClass* ResourceSpawnClass::default_instance_ = NULL;

ResourceSpawnClass* ResourceSpawnClass::New() const {
  return new ResourceSpawnClass;
}

void ResourceSpawnClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_class_name()) {
      if (class_name_ != &::google::protobuf::internal::kEmptyString) {
        class_name_->clear();
      }
    }
    if (has_stf_class()) {
      if (stf_class_ != &::google::protobuf::internal::kEmptyString) {
        stf_class_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceSpawnClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string class_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stf_class;
        break;
      }

      // required string stf_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stf_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stf_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stf_class().data(), this->stf_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceSpawnClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string class_name = 1;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->class_name(), output);
  }

  // required string stf_class = 2;
  if (has_stf_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stf_class().data(), this->stf_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stf_class(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceSpawnClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string class_name = 1;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // required string stf_class = 2;
  if (has_stf_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stf_class().data(), this->stf_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stf_class(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceSpawnClass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string class_name = 1;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // required string stf_class = 2;
    if (has_stf_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stf_class());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceSpawnClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceSpawnClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceSpawnClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceSpawnClass::MergeFrom(const ResourceSpawnClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_stf_class()) {
      set_stf_class(from.stf_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceSpawnClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSpawnClass::CopyFrom(const ResourceSpawnClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSpawnClass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourceSpawnClass::Swap(ResourceSpawnClass* other) {
  if (other != this) {
    std::swap(class_name_, other->class_name_);
    std::swap(stf_class_, other->stf_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceSpawnClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceSpawnClass_descriptor_;
  metadata.reflection = ResourceSpawnClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactoryCrateItem::kCountFieldNumber;
const int FactoryCrateItem::kMaxItemsFieldNumber;
const int FactoryCrateItem::kContainedItemsFieldNumber;
#endif  // !_MSC_VER

FactoryCrateItem::FactoryCrateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactoryCrateItem::InitAsDefaultInstance() {
  contained_items_ = const_cast< ::swgemurpcserver::rpc::CharacterInventoryItem*>(&::swgemurpcserver::rpc::CharacterInventoryItem::default_instance());
}

FactoryCrateItem::FactoryCrateItem(const FactoryCrateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactoryCrateItem::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  max_items_ = 0;
  contained_items_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryCrateItem::~FactoryCrateItem() {
  SharedDtor();
}

void FactoryCrateItem::SharedDtor() {
  if (this != default_instance_) {
    delete contained_items_;
  }
}

void FactoryCrateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryCrateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryCrateItem_descriptor_;
}

const FactoryCrateItem& FactoryCrateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

FactoryCrateItem* FactoryCrateItem::default_instance_ = NULL;

FactoryCrateItem* FactoryCrateItem::New() const {
  return new FactoryCrateItem;
}

void FactoryCrateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    max_items_ = 0;
    if (has_contained_items()) {
      if (contained_items_ != NULL) contained_items_->::swgemurpcserver::rpc::CharacterInventoryItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryCrateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_items;
        break;
      }

      // required int32 max_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_items_)));
          set_has_max_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contained_items;
        break;
      }

      // required .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contained_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contained_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactoryCrateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // required int32 max_items = 2;
  if (has_max_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_items(), output);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 3;
  if (has_contained_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contained_items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactoryCrateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // required int32 max_items = 2;
  if (has_max_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_items(), target);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 3;
  if (has_contained_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contained_items(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactoryCrateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 max_items = 2;
    if (has_max_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_items());
    }

    // required .swgemurpcserver.rpc.CharacterInventoryItem contained_items = 3;
    if (has_contained_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contained_items());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryCrateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryCrateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryCrateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryCrateItem::MergeFrom(const FactoryCrateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max_items()) {
      set_max_items(from.max_items());
    }
    if (from.has_contained_items()) {
      mutable_contained_items()->::swgemurpcserver::rpc::CharacterInventoryItem::MergeFrom(from.contained_items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryCrateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryCrateItem::CopyFrom(const FactoryCrateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryCrateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_contained_items()) {
    if (!this->contained_items().IsInitialized()) return false;
  }
  return true;
}

void FactoryCrateItem::Swap(FactoryCrateItem* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(max_items_, other->max_items_);
    std::swap(contained_items_, other->contained_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryCrateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryCrateItem_descriptor_;
  metadata.reflection = FactoryCrateItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PharmaceuticalItem_PharmaceuticalItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PharmaceuticalItem_PharmaceuticalItemType_descriptor_;
}
bool PharmaceuticalItem_PharmaceuticalItemType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::UNKNOWN;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::CUREPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::DOTPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::ENHANCEPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::RANGEDSTIMPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::REVIVIEPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::STIMPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::WOUNDPACK;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::PharmaceuticalItemType_MIN;
const PharmaceuticalItem_PharmaceuticalItemType PharmaceuticalItem::PharmaceuticalItemType_MAX;
const int PharmaceuticalItem::PharmaceuticalItemType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PharmaceuticalItem::kPharmaTypeFieldNumber;
const int PharmaceuticalItem::kEffectivenessFieldNumber;
const int PharmaceuticalItem::kAreaFieldNumber;
const int PharmaceuticalItem::kMedicineRequiredFieldNumber;
const int PharmaceuticalItem::kUseCountFieldNumber;
const int PharmaceuticalItem::kRangedStimDetailsFieldNumber;
const int PharmaceuticalItem::kDotPackDetailsFieldNumber;
const int PharmaceuticalItem::kEnhancePackDetailsFieldNumber;
const int PharmaceuticalItem::kReviviePackDetailsFieldNumber;
const int PharmaceuticalItem::kWoundPackDetailsFieldNumber;
#endif  // !_MSC_VER

PharmaceuticalItem::PharmaceuticalItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PharmaceuticalItem::InitAsDefaultInstance() {
  ranged_stim_details_ = const_cast< ::swgemurpcserver::rpc::RangedStimPackItem*>(&::swgemurpcserver::rpc::RangedStimPackItem::default_instance());
  dot_pack_details_ = const_cast< ::swgemurpcserver::rpc::DotPackItem*>(&::swgemurpcserver::rpc::DotPackItem::default_instance());
  enhance_pack_details_ = const_cast< ::swgemurpcserver::rpc::EnhancePackItem*>(&::swgemurpcserver::rpc::EnhancePackItem::default_instance());
  revivie_pack_details_ = const_cast< ::swgemurpcserver::rpc::RevivePackItem*>(&::swgemurpcserver::rpc::RevivePackItem::default_instance());
  wound_pack_details_ = const_cast< ::swgemurpcserver::rpc::WoundPackItem*>(&::swgemurpcserver::rpc::WoundPackItem::default_instance());
}

PharmaceuticalItem::PharmaceuticalItem(const PharmaceuticalItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PharmaceuticalItem::SharedCtor() {
  _cached_size_ = 0;
  pharma_type_ = -1;
  effectiveness_ = 0;
  area_ = 0;
  medicine_required_ = 0;
  use_count_ = 0;
  ranged_stim_details_ = NULL;
  dot_pack_details_ = NULL;
  enhance_pack_details_ = NULL;
  revivie_pack_details_ = NULL;
  wound_pack_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PharmaceuticalItem::~PharmaceuticalItem() {
  SharedDtor();
}

void PharmaceuticalItem::SharedDtor() {
  if (this != default_instance_) {
    delete ranged_stim_details_;
    delete dot_pack_details_;
    delete enhance_pack_details_;
    delete revivie_pack_details_;
    delete wound_pack_details_;
  }
}

void PharmaceuticalItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PharmaceuticalItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PharmaceuticalItem_descriptor_;
}

const PharmaceuticalItem& PharmaceuticalItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

PharmaceuticalItem* PharmaceuticalItem::default_instance_ = NULL;

PharmaceuticalItem* PharmaceuticalItem::New() const {
  return new PharmaceuticalItem;
}

void PharmaceuticalItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pharma_type_ = -1;
    effectiveness_ = 0;
    area_ = 0;
    medicine_required_ = 0;
    use_count_ = 0;
    if (has_ranged_stim_details()) {
      if (ranged_stim_details_ != NULL) ranged_stim_details_->::swgemurpcserver::rpc::RangedStimPackItem::Clear();
    }
    if (has_dot_pack_details()) {
      if (dot_pack_details_ != NULL) dot_pack_details_->::swgemurpcserver::rpc::DotPackItem::Clear();
    }
    if (has_enhance_pack_details()) {
      if (enhance_pack_details_ != NULL) enhance_pack_details_->::swgemurpcserver::rpc::EnhancePackItem::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_revivie_pack_details()) {
      if (revivie_pack_details_ != NULL) revivie_pack_details_->::swgemurpcserver::rpc::RevivePackItem::Clear();
    }
    if (has_wound_pack_details()) {
      if (wound_pack_details_ != NULL) wound_pack_details_->::swgemurpcserver::rpc::WoundPackItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PharmaceuticalItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .swgemurpcserver.rpc.PharmaceuticalItem.PharmaceuticalItemType pharma_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::swgemurpcserver::rpc::PharmaceuticalItem_PharmaceuticalItemType_IsValid(value)) {
            set_pharma_type(static_cast< ::swgemurpcserver::rpc::PharmaceuticalItem_PharmaceuticalItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_effectiveness;
        break;
      }

      // required float effectiveness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effectiveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectiveness_)));
          set_has_effectiveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_area;
        break;
      }

      // required float area = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_medicine_required;
        break;
      }

      // required int32 medicine_required = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medicine_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medicine_required_)));
          set_has_medicine_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_count;
        break;
      }

      // required int32 use_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ranged_stim_details;
        break;
      }

      // optional .swgemurpcserver.rpc.RangedStimPackItem ranged_stim_details = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranged_stim_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranged_stim_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dot_pack_details;
        break;
      }

      // optional .swgemurpcserver.rpc.DotPackItem dot_pack_details = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dot_pack_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dot_pack_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_enhance_pack_details;
        break;
      }

      // optional .swgemurpcserver.rpc.EnhancePackItem enhance_pack_details = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enhance_pack_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enhance_pack_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_revivie_pack_details;
        break;
      }

      // optional .swgemurpcserver.rpc.RevivePackItem revivie_pack_details = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revivie_pack_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revivie_pack_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wound_pack_details;
        break;
      }

      // optional .swgemurpcserver.rpc.WoundPackItem wound_pack_details = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wound_pack_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wound_pack_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PharmaceuticalItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .swgemurpcserver.rpc.PharmaceuticalItem.PharmaceuticalItemType pharma_type = 1;
  if (has_pharma_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pharma_type(), output);
  }

  // required float effectiveness = 2;
  if (has_effectiveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->effectiveness(), output);
  }

  // required float area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->area(), output);
  }

  // required int32 medicine_required = 4;
  if (has_medicine_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->medicine_required(), output);
  }

  // required int32 use_count = 5;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_count(), output);
  }

  // optional .swgemurpcserver.rpc.RangedStimPackItem ranged_stim_details = 6;
  if (has_ranged_stim_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ranged_stim_details(), output);
  }

  // optional .swgemurpcserver.rpc.DotPackItem dot_pack_details = 7;
  if (has_dot_pack_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dot_pack_details(), output);
  }

  // optional .swgemurpcserver.rpc.EnhancePackItem enhance_pack_details = 8;
  if (has_enhance_pack_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->enhance_pack_details(), output);
  }

  // optional .swgemurpcserver.rpc.RevivePackItem revivie_pack_details = 9;
  if (has_revivie_pack_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->revivie_pack_details(), output);
  }

  // optional .swgemurpcserver.rpc.WoundPackItem wound_pack_details = 10;
  if (has_wound_pack_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->wound_pack_details(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PharmaceuticalItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .swgemurpcserver.rpc.PharmaceuticalItem.PharmaceuticalItemType pharma_type = 1;
  if (has_pharma_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pharma_type(), target);
  }

  // required float effectiveness = 2;
  if (has_effectiveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->effectiveness(), target);
  }

  // required float area = 3;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->area(), target);
  }

  // required int32 medicine_required = 4;
  if (has_medicine_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->medicine_required(), target);
  }

  // required int32 use_count = 5;
  if (has_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_count(), target);
  }

  // optional .swgemurpcserver.rpc.RangedStimPackItem ranged_stim_details = 6;
  if (has_ranged_stim_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ranged_stim_details(), target);
  }

  // optional .swgemurpcserver.rpc.DotPackItem dot_pack_details = 7;
  if (has_dot_pack_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dot_pack_details(), target);
  }

  // optional .swgemurpcserver.rpc.EnhancePackItem enhance_pack_details = 8;
  if (has_enhance_pack_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->enhance_pack_details(), target);
  }

  // optional .swgemurpcserver.rpc.RevivePackItem revivie_pack_details = 9;
  if (has_revivie_pack_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->revivie_pack_details(), target);
  }

  // optional .swgemurpcserver.rpc.WoundPackItem wound_pack_details = 10;
  if (has_wound_pack_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->wound_pack_details(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PharmaceuticalItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .swgemurpcserver.rpc.PharmaceuticalItem.PharmaceuticalItemType pharma_type = 1;
    if (has_pharma_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pharma_type());
    }

    // required float effectiveness = 2;
    if (has_effectiveness()) {
      total_size += 1 + 4;
    }

    // required float area = 3;
    if (has_area()) {
      total_size += 1 + 4;
    }

    // required int32 medicine_required = 4;
    if (has_medicine_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medicine_required());
    }

    // required int32 use_count = 5;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_count());
    }

    // optional .swgemurpcserver.rpc.RangedStimPackItem ranged_stim_details = 6;
    if (has_ranged_stim_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranged_stim_details());
    }

    // optional .swgemurpcserver.rpc.DotPackItem dot_pack_details = 7;
    if (has_dot_pack_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dot_pack_details());
    }

    // optional .swgemurpcserver.rpc.EnhancePackItem enhance_pack_details = 8;
    if (has_enhance_pack_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enhance_pack_details());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .swgemurpcserver.rpc.RevivePackItem revivie_pack_details = 9;
    if (has_revivie_pack_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revivie_pack_details());
    }

    // optional .swgemurpcserver.rpc.WoundPackItem wound_pack_details = 10;
    if (has_wound_pack_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wound_pack_details());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PharmaceuticalItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PharmaceuticalItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PharmaceuticalItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PharmaceuticalItem::MergeFrom(const PharmaceuticalItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pharma_type()) {
      set_pharma_type(from.pharma_type());
    }
    if (from.has_effectiveness()) {
      set_effectiveness(from.effectiveness());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_medicine_required()) {
      set_medicine_required(from.medicine_required());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
    if (from.has_ranged_stim_details()) {
      mutable_ranged_stim_details()->::swgemurpcserver::rpc::RangedStimPackItem::MergeFrom(from.ranged_stim_details());
    }
    if (from.has_dot_pack_details()) {
      mutable_dot_pack_details()->::swgemurpcserver::rpc::DotPackItem::MergeFrom(from.dot_pack_details());
    }
    if (from.has_enhance_pack_details()) {
      mutable_enhance_pack_details()->::swgemurpcserver::rpc::EnhancePackItem::MergeFrom(from.enhance_pack_details());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_revivie_pack_details()) {
      mutable_revivie_pack_details()->::swgemurpcserver::rpc::RevivePackItem::MergeFrom(from.revivie_pack_details());
    }
    if (from.has_wound_pack_details()) {
      mutable_wound_pack_details()->::swgemurpcserver::rpc::WoundPackItem::MergeFrom(from.wound_pack_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PharmaceuticalItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PharmaceuticalItem::CopyFrom(const PharmaceuticalItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PharmaceuticalItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_ranged_stim_details()) {
    if (!this->ranged_stim_details().IsInitialized()) return false;
  }
  if (has_dot_pack_details()) {
    if (!this->dot_pack_details().IsInitialized()) return false;
  }
  if (has_enhance_pack_details()) {
    if (!this->enhance_pack_details().IsInitialized()) return false;
  }
  if (has_revivie_pack_details()) {
    if (!this->revivie_pack_details().IsInitialized()) return false;
  }
  if (has_wound_pack_details()) {
    if (!this->wound_pack_details().IsInitialized()) return false;
  }
  return true;
}

void PharmaceuticalItem::Swap(PharmaceuticalItem* other) {
  if (other != this) {
    std::swap(pharma_type_, other->pharma_type_);
    std::swap(effectiveness_, other->effectiveness_);
    std::swap(area_, other->area_);
    std::swap(medicine_required_, other->medicine_required_);
    std::swap(use_count_, other->use_count_);
    std::swap(ranged_stim_details_, other->ranged_stim_details_);
    std::swap(dot_pack_details_, other->dot_pack_details_);
    std::swap(enhance_pack_details_, other->enhance_pack_details_);
    std::swap(revivie_pack_details_, other->revivie_pack_details_);
    std::swap(wound_pack_details_, other->wound_pack_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PharmaceuticalItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PharmaceuticalItem_descriptor_;
  metadata.reflection = PharmaceuticalItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangedStimPackItem::kRangeModFieldNumber;
#endif  // !_MSC_VER

RangedStimPackItem::RangedStimPackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangedStimPackItem::InitAsDefaultInstance() {
}

RangedStimPackItem::RangedStimPackItem(const RangedStimPackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangedStimPackItem::SharedCtor() {
  _cached_size_ = 0;
  range_mod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangedStimPackItem::~RangedStimPackItem() {
  SharedDtor();
}

void RangedStimPackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangedStimPackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangedStimPackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangedStimPackItem_descriptor_;
}

const RangedStimPackItem& RangedStimPackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

RangedStimPackItem* RangedStimPackItem::default_instance_ = NULL;

RangedStimPackItem* RangedStimPackItem::New() const {
  return new RangedStimPackItem;
}

void RangedStimPackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    range_mod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangedStimPackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float range_mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_mod_)));
          set_has_range_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangedStimPackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float range_mod = 1;
  if (has_range_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->range_mod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangedStimPackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float range_mod = 1;
  if (has_range_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->range_mod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangedStimPackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float range_mod = 1;
    if (has_range_mod()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangedStimPackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangedStimPackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangedStimPackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangedStimPackItem::MergeFrom(const RangedStimPackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_mod()) {
      set_range_mod(from.range_mod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangedStimPackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangedStimPackItem::CopyFrom(const RangedStimPackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangedStimPackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RangedStimPackItem::Swap(RangedStimPackItem* other) {
  if (other != this) {
    std::swap(range_mod_, other->range_mod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangedStimPackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangedStimPackItem_descriptor_;
  metadata.reflection = RangedStimPackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DotPackItem::kPotencyFieldNumber;
const int DotPackItem::kDurationFieldNumber;
const int DotPackItem::kPoolFieldNumber;
const int DotPackItem::kDotTypeFieldNumber;
const int DotPackItem::kPoisonUnitFieldNumber;
const int DotPackItem::kDiseaseUnitFieldNumber;
#endif  // !_MSC_VER

DotPackItem::DotPackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotPackItem::InitAsDefaultInstance() {
}

DotPackItem::DotPackItem(const DotPackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotPackItem::SharedCtor() {
  _cached_size_ = 0;
  potency_ = 0;
  duration_ = 0u;
  pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dot_type_ = 0u;
  poison_unit_ = false;
  disease_unit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotPackItem::~DotPackItem() {
  SharedDtor();
}

void DotPackItem::SharedDtor() {
  if (pool_ != &::google::protobuf::internal::kEmptyString) {
    delete pool_;
  }
  if (this != default_instance_) {
  }
}

void DotPackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotPackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotPackItem_descriptor_;
}

const DotPackItem& DotPackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

DotPackItem* DotPackItem::default_instance_ = NULL;

DotPackItem* DotPackItem::New() const {
  return new DotPackItem;
}

void DotPackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    potency_ = 0;
    duration_ = 0u;
    if (has_pool()) {
      if (pool_ != &::google::protobuf::internal::kEmptyString) {
        pool_->clear();
      }
    }
    dot_type_ = 0u;
    poison_unit_ = false;
    disease_unit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotPackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float potency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &potency_)));
          set_has_potency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }

      // required fixed32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pool;
        break;
      }

      // required string pool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dot_type;
        break;
      }

      // required fixed32 dot_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dot_type_)));
          set_has_dot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_poison_unit;
        break;
      }

      // required bool poison_unit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poison_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poison_unit_)));
          set_has_poison_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_disease_unit;
        break;
      }

      // required bool disease_unit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disease_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disease_unit_)));
          set_has_disease_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotPackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float potency = 1;
  if (has_potency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->potency(), output);
  }

  // required fixed32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->duration(), output);
  }

  // required string pool = 3;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pool(), output);
  }

  // required fixed32 dot_type = 4;
  if (has_dot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->dot_type(), output);
  }

  // required bool poison_unit = 5;
  if (has_poison_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->poison_unit(), output);
  }

  // required bool disease_unit = 6;
  if (has_disease_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disease_unit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotPackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float potency = 1;
  if (has_potency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->potency(), target);
  }

  // required fixed32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->duration(), target);
  }

  // required string pool = 3;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pool(), target);
  }

  // required fixed32 dot_type = 4;
  if (has_dot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->dot_type(), target);
  }

  // required bool poison_unit = 5;
  if (has_poison_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->poison_unit(), target);
  }

  // required bool disease_unit = 6;
  if (has_disease_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disease_unit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotPackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float potency = 1;
    if (has_potency()) {
      total_size += 1 + 4;
    }

    // required fixed32 duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // required string pool = 3;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool());
    }

    // required fixed32 dot_type = 4;
    if (has_dot_type()) {
      total_size += 1 + 4;
    }

    // required bool poison_unit = 5;
    if (has_poison_unit()) {
      total_size += 1 + 1;
    }

    // required bool disease_unit = 6;
    if (has_disease_unit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotPackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotPackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotPackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotPackItem::MergeFrom(const DotPackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_potency()) {
      set_potency(from.potency());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_dot_type()) {
      set_dot_type(from.dot_type());
    }
    if (from.has_poison_unit()) {
      set_poison_unit(from.poison_unit());
    }
    if (from.has_disease_unit()) {
      set_disease_unit(from.disease_unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotPackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotPackItem::CopyFrom(const DotPackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotPackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DotPackItem::Swap(DotPackItem* other) {
  if (other != this) {
    std::swap(potency_, other->potency_);
    std::swap(duration_, other->duration_);
    std::swap(pool_, other->pool_);
    std::swap(dot_type_, other->dot_type_);
    std::swap(poison_unit_, other->poison_unit_);
    std::swap(disease_unit_, other->disease_unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotPackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotPackItem_descriptor_;
  metadata.reflection = DotPackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnhancePackItem::kDurationFieldNumber;
const int EnhancePackItem::kAttributeFieldNumber;
#endif  // !_MSC_VER

EnhancePackItem::EnhancePackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnhancePackItem::InitAsDefaultInstance() {
}

EnhancePackItem::EnhancePackItem(const EnhancePackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnhancePackItem::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  attribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhancePackItem::~EnhancePackItem() {
  SharedDtor();
}

void EnhancePackItem::SharedDtor() {
  if (attribute_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute_;
  }
  if (this != default_instance_) {
  }
}

void EnhancePackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnhancePackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnhancePackItem_descriptor_;
}

const EnhancePackItem& EnhancePackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

EnhancePackItem* EnhancePackItem::default_instance_ = NULL;

EnhancePackItem* EnhancePackItem::New() const {
  return new EnhancePackItem;
}

void EnhancePackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    if (has_attribute()) {
      if (attribute_ != &::google::protobuf::internal::kEmptyString) {
        attribute_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnhancePackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // required string attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attribute().data(), this->attribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhancePackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->duration(), output);
  }

  // required string attribute = 2;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnhancePackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->duration(), target);
  }

  // required string attribute = 2;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnhancePackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float duration = 1;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // required string attribute = 2;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhancePackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnhancePackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnhancePackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnhancePackItem::MergeFrom(const EnhancePackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnhancePackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnhancePackItem::CopyFrom(const EnhancePackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhancePackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnhancePackItem::Swap(EnhancePackItem* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(attribute_, other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnhancePackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnhancePackItem_descriptor_;
  metadata.reflection = EnhancePackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevivePackItem::kHealthWoundHealedFieldNumber;
const int RevivePackItem::kHealthHealedFieldNumber;
const int RevivePackItem::kActionWoundHealedFieldNumber;
const int RevivePackItem::kActionHealedFieldNumber;
const int RevivePackItem::kMindWoundHealedFieldNumber;
const int RevivePackItem::kMindHealedFieldNumber;
#endif  // !_MSC_VER

RevivePackItem::RevivePackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RevivePackItem::InitAsDefaultInstance() {
}

RevivePackItem::RevivePackItem(const RevivePackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RevivePackItem::SharedCtor() {
  _cached_size_ = 0;
  health_wound_healed_ = 0;
  health_healed_ = 0;
  action_wound_healed_ = 0;
  action_healed_ = 0;
  mind_wound_healed_ = 0;
  mind_healed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevivePackItem::~RevivePackItem() {
  SharedDtor();
}

void RevivePackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RevivePackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevivePackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevivePackItem_descriptor_;
}

const RevivePackItem& RevivePackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

RevivePackItem* RevivePackItem::default_instance_ = NULL;

RevivePackItem* RevivePackItem::New() const {
  return new RevivePackItem;
}

void RevivePackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    health_wound_healed_ = 0;
    health_healed_ = 0;
    action_wound_healed_ = 0;
    action_healed_ = 0;
    mind_wound_healed_ = 0;
    mind_healed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevivePackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float health_wound_healed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_wound_healed_)));
          set_has_health_wound_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_health_healed;
        break;
      }

      // required float health_healed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_health_healed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_healed_)));
          set_has_health_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_action_wound_healed;
        break;
      }

      // required float action_wound_healed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_action_wound_healed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &action_wound_healed_)));
          set_has_action_wound_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_action_healed;
        break;
      }

      // required float action_healed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_action_healed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &action_healed_)));
          set_has_action_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mind_wound_healed;
        break;
      }

      // required float mind_wound_healed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mind_wound_healed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mind_wound_healed_)));
          set_has_mind_wound_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_mind_healed;
        break;
      }

      // required float mind_healed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mind_healed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mind_healed_)));
          set_has_mind_healed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RevivePackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float health_wound_healed = 1;
  if (has_health_wound_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->health_wound_healed(), output);
  }

  // required float health_healed = 2;
  if (has_health_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health_healed(), output);
  }

  // required float action_wound_healed = 3;
  if (has_action_wound_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->action_wound_healed(), output);
  }

  // required float action_healed = 4;
  if (has_action_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->action_healed(), output);
  }

  // required float mind_wound_healed = 5;
  if (has_mind_wound_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mind_wound_healed(), output);
  }

  // required float mind_healed = 6;
  if (has_mind_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mind_healed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RevivePackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float health_wound_healed = 1;
  if (has_health_wound_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->health_wound_healed(), target);
  }

  // required float health_healed = 2;
  if (has_health_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health_healed(), target);
  }

  // required float action_wound_healed = 3;
  if (has_action_wound_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->action_wound_healed(), target);
  }

  // required float action_healed = 4;
  if (has_action_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->action_healed(), target);
  }

  // required float mind_wound_healed = 5;
  if (has_mind_wound_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mind_wound_healed(), target);
  }

  // required float mind_healed = 6;
  if (has_mind_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mind_healed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RevivePackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float health_wound_healed = 1;
    if (has_health_wound_healed()) {
      total_size += 1 + 4;
    }

    // required float health_healed = 2;
    if (has_health_healed()) {
      total_size += 1 + 4;
    }

    // required float action_wound_healed = 3;
    if (has_action_wound_healed()) {
      total_size += 1 + 4;
    }

    // required float action_healed = 4;
    if (has_action_healed()) {
      total_size += 1 + 4;
    }

    // required float mind_wound_healed = 5;
    if (has_mind_wound_healed()) {
      total_size += 1 + 4;
    }

    // required float mind_healed = 6;
    if (has_mind_healed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevivePackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevivePackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevivePackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevivePackItem::MergeFrom(const RevivePackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_health_wound_healed()) {
      set_health_wound_healed(from.health_wound_healed());
    }
    if (from.has_health_healed()) {
      set_health_healed(from.health_healed());
    }
    if (from.has_action_wound_healed()) {
      set_action_wound_healed(from.action_wound_healed());
    }
    if (from.has_action_healed()) {
      set_action_healed(from.action_healed());
    }
    if (from.has_mind_wound_healed()) {
      set_mind_wound_healed(from.mind_wound_healed());
    }
    if (from.has_mind_healed()) {
      set_mind_healed(from.mind_healed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevivePackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevivePackItem::CopyFrom(const RevivePackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevivePackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RevivePackItem::Swap(RevivePackItem* other) {
  if (other != this) {
    std::swap(health_wound_healed_, other->health_wound_healed_);
    std::swap(health_healed_, other->health_healed_);
    std::swap(action_wound_healed_, other->action_wound_healed_);
    std::swap(action_healed_, other->action_healed_);
    std::swap(mind_wound_healed_, other->mind_wound_healed_);
    std::swap(mind_healed_, other->mind_healed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevivePackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevivePackItem_descriptor_;
  metadata.reflection = RevivePackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WoundPackItem::kAttributeFieldNumber;
#endif  // !_MSC_VER

WoundPackItem::WoundPackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WoundPackItem::InitAsDefaultInstance() {
}

WoundPackItem::WoundPackItem(const WoundPackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WoundPackItem::SharedCtor() {
  _cached_size_ = 0;
  attribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WoundPackItem::~WoundPackItem() {
  SharedDtor();
}

void WoundPackItem::SharedDtor() {
  if (attribute_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute_;
  }
  if (this != default_instance_) {
  }
}

void WoundPackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WoundPackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WoundPackItem_descriptor_;
}

const WoundPackItem& WoundPackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

WoundPackItem* WoundPackItem::default_instance_ = NULL;

WoundPackItem* WoundPackItem::New() const {
  return new WoundPackItem;
}

void WoundPackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attribute()) {
      if (attribute_ != &::google::protobuf::internal::kEmptyString) {
        attribute_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WoundPackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attribute().data(), this->attribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WoundPackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string attribute = 1;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WoundPackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string attribute = 1;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute().data(), this->attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WoundPackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string attribute = 1;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WoundPackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WoundPackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WoundPackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WoundPackItem::MergeFrom(const WoundPackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WoundPackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WoundPackItem::CopyFrom(const WoundPackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WoundPackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WoundPackItem::Swap(WoundPackItem* other) {
  if (other != this) {
    std::swap(attribute_, other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WoundPackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WoundPackItem_descriptor_;
  metadata.reflection = WoundPackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CraftingComponentItem::kAttributesFieldNumber;
#endif  // !_MSC_VER

CraftingComponentItem::CraftingComponentItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CraftingComponentItem::InitAsDefaultInstance() {
}

CraftingComponentItem::CraftingComponentItem(const CraftingComponentItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CraftingComponentItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CraftingComponentItem::~CraftingComponentItem() {
  SharedDtor();
}

void CraftingComponentItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CraftingComponentItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CraftingComponentItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CraftingComponentItem_descriptor_;
}

const CraftingComponentItem& CraftingComponentItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

CraftingComponentItem* CraftingComponentItem::default_instance_ = NULL;

CraftingComponentItem* CraftingComponentItem::New() const {
  return new CraftingComponentItem;
}

void CraftingComponentItem::Clear() {
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CraftingComponentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swgemurpcserver.rpc.CraftingComponentAttribute attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CraftingComponentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .swgemurpcserver.rpc.CraftingComponentAttribute attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attributes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CraftingComponentItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .swgemurpcserver.rpc.CraftingComponentAttribute attributes = 1;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attributes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CraftingComponentItem::ByteSize() const {
  int total_size = 0;

  // repeated .swgemurpcserver.rpc.CraftingComponentAttribute attributes = 1;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CraftingComponentItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CraftingComponentItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CraftingComponentItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CraftingComponentItem::MergeFrom(const CraftingComponentItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CraftingComponentItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraftingComponentItem::CopyFrom(const CraftingComponentItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraftingComponentItem::IsInitialized() const {

  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  return true;
}

void CraftingComponentItem::Swap(CraftingComponentItem* other) {
  if (other != this) {
    attributes_.Swap(&other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CraftingComponentItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CraftingComponentItem_descriptor_;
  metadata.reflection = CraftingComponentItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CraftingComponentAttribute::kIdFieldNumber;
const int CraftingComponentAttribute::kTiteFieldNumber;
const int CraftingComponentAttribute::kPrecisionFieldNumber;
const int CraftingComponentAttribute::kValueFieldNumber;
const int CraftingComponentAttribute::kHiddenFieldNumber;
#endif  // !_MSC_VER

CraftingComponentAttribute::CraftingComponentAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CraftingComponentAttribute::InitAsDefaultInstance() {
}

CraftingComponentAttribute::CraftingComponentAttribute(const CraftingComponentAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CraftingComponentAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tite_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precision_ = 0;
  value_ = 0;
  hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CraftingComponentAttribute::~CraftingComponentAttribute() {
  SharedDtor();
}

void CraftingComponentAttribute::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (tite_ != &::google::protobuf::internal::kEmptyString) {
    delete tite_;
  }
  if (this != default_instance_) {
  }
}

void CraftingComponentAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CraftingComponentAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CraftingComponentAttribute_descriptor_;
}

const CraftingComponentAttribute& CraftingComponentAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

CraftingComponentAttribute* CraftingComponentAttribute::default_instance_ = NULL;

CraftingComponentAttribute* CraftingComponentAttribute::New() const {
  return new CraftingComponentAttribute;
}

void CraftingComponentAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_tite()) {
      if (tite_ != &::google::protobuf::internal::kEmptyString) {
        tite_->clear();
      }
    }
    precision_ = 0;
    value_ = 0;
    hidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CraftingComponentAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tite;
        break;
      }

      // required string tite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tite()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tite().data(), this->tite().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_precision;
        break;
      }

      // required int32 precision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_value;
        break;
      }

      // required float value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hidden;
        break;
      }

      // required bool hidden = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CraftingComponentAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string tite = 2;
  if (has_tite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tite().data(), this->tite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tite(), output);
  }

  // required int32 precision = 3;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->precision(), output);
  }

  // required float value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // required bool hidden = 5;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CraftingComponentAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string tite = 2;
  if (has_tite()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tite().data(), this->tite().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tite(), target);
  }

  // required int32 precision = 3;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->precision(), target);
  }

  // required float value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // required bool hidden = 5;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CraftingComponentAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string tite = 2;
    if (has_tite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tite());
    }

    // required int32 precision = 3;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // required float value = 4;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // required bool hidden = 5;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CraftingComponentAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CraftingComponentAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CraftingComponentAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CraftingComponentAttribute::MergeFrom(const CraftingComponentAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tite()) {
      set_tite(from.tite());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CraftingComponentAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraftingComponentAttribute::CopyFrom(const CraftingComponentAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraftingComponentAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CraftingComponentAttribute::Swap(CraftingComponentAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tite_, other->tite_);
    std::swap(precision_, other->precision_);
    std::swap(value_, other->value_);
    std::swap(hidden_, other->hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CraftingComponentAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CraftingComponentAttribute_descriptor_;
  metadata.reflection = CraftingComponentAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManufacturingSchematicItem::kManufactureLimitFieldNumber;
const int ManufacturingSchematicItem::kPrototypeDetailsFieldNumber;
const int ManufacturingSchematicItem::kBlueprintEntriesFieldNumber;
const int ManufacturingSchematicItem::kIngredientsFieldNumber;
#endif  // !_MSC_VER

ManufacturingSchematicItem::ManufacturingSchematicItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManufacturingSchematicItem::InitAsDefaultInstance() {
  prototype_details_ = const_cast< ::swgemurpcserver::rpc::CharacterInventoryItem*>(&::swgemurpcserver::rpc::CharacterInventoryItem::default_instance());
}

ManufacturingSchematicItem::ManufacturingSchematicItem(const ManufacturingSchematicItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManufacturingSchematicItem::SharedCtor() {
  _cached_size_ = 0;
  manufacture_limit_ = 0;
  prototype_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManufacturingSchematicItem::~ManufacturingSchematicItem() {
  SharedDtor();
}

void ManufacturingSchematicItem::SharedDtor() {
  if (this != default_instance_) {
    delete prototype_details_;
  }
}

void ManufacturingSchematicItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManufacturingSchematicItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManufacturingSchematicItem_descriptor_;
}

const ManufacturingSchematicItem& ManufacturingSchematicItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

ManufacturingSchematicItem* ManufacturingSchematicItem::default_instance_ = NULL;

ManufacturingSchematicItem* ManufacturingSchematicItem::New() const {
  return new ManufacturingSchematicItem;
}

void ManufacturingSchematicItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manufacture_limit_ = 0;
    if (has_prototype_details()) {
      if (prototype_details_ != NULL) prototype_details_->::swgemurpcserver::rpc::CharacterInventoryItem::Clear();
    }
  }
  blueprint_entries_.Clear();
  ingredients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManufacturingSchematicItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 manufacture_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manufacture_limit_)));
          set_has_manufacture_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prototype_details;
        break;
      }

      // required .swgemurpcserver.rpc.CharacterInventoryItem prototype_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prototype_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prototype_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blueprint_entries;
        break;
      }

      // repeated .swgemurpcserver.rpc.BlueprintEntryItem blueprint_entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueprint_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blueprint_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blueprint_entries;
        if (input->ExpectTag(34)) goto parse_ingredients;
        break;
      }

      // repeated .swgemurpcserver.rpc.IngredientItem ingredients = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingredients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ingredients()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ingredients;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManufacturingSchematicItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 manufacture_limit = 1;
  if (has_manufacture_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->manufacture_limit(), output);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem prototype_details = 2;
  if (has_prototype_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prototype_details(), output);
  }

  // repeated .swgemurpcserver.rpc.BlueprintEntryItem blueprint_entries = 3;
  for (int i = 0; i < this->blueprint_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blueprint_entries(i), output);
  }

  // repeated .swgemurpcserver.rpc.IngredientItem ingredients = 4;
  for (int i = 0; i < this->ingredients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ingredients(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManufacturingSchematicItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 manufacture_limit = 1;
  if (has_manufacture_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->manufacture_limit(), target);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem prototype_details = 2;
  if (has_prototype_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prototype_details(), target);
  }

  // repeated .swgemurpcserver.rpc.BlueprintEntryItem blueprint_entries = 3;
  for (int i = 0; i < this->blueprint_entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blueprint_entries(i), target);
  }

  // repeated .swgemurpcserver.rpc.IngredientItem ingredients = 4;
  for (int i = 0; i < this->ingredients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ingredients(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManufacturingSchematicItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 manufacture_limit = 1;
    if (has_manufacture_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manufacture_limit());
    }

    // required .swgemurpcserver.rpc.CharacterInventoryItem prototype_details = 2;
    if (has_prototype_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prototype_details());
    }

  }
  // repeated .swgemurpcserver.rpc.BlueprintEntryItem blueprint_entries = 3;
  total_size += 1 * this->blueprint_entries_size();
  for (int i = 0; i < this->blueprint_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blueprint_entries(i));
  }

  // repeated .swgemurpcserver.rpc.IngredientItem ingredients = 4;
  total_size += 1 * this->ingredients_size();
  for (int i = 0; i < this->ingredients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ingredients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManufacturingSchematicItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManufacturingSchematicItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManufacturingSchematicItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManufacturingSchematicItem::MergeFrom(const ManufacturingSchematicItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  blueprint_entries_.MergeFrom(from.blueprint_entries_);
  ingredients_.MergeFrom(from.ingredients_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manufacture_limit()) {
      set_manufacture_limit(from.manufacture_limit());
    }
    if (from.has_prototype_details()) {
      mutable_prototype_details()->::swgemurpcserver::rpc::CharacterInventoryItem::MergeFrom(from.prototype_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManufacturingSchematicItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManufacturingSchematicItem::CopyFrom(const ManufacturingSchematicItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManufacturingSchematicItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_prototype_details()) {
    if (!this->prototype_details().IsInitialized()) return false;
  }
  for (int i = 0; i < blueprint_entries_size(); i++) {
    if (!this->blueprint_entries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ingredients_size(); i++) {
    if (!this->ingredients(i).IsInitialized()) return false;
  }
  return true;
}

void ManufacturingSchematicItem::Swap(ManufacturingSchematicItem* other) {
  if (other != this) {
    std::swap(manufacture_limit_, other->manufacture_limit_);
    std::swap(prototype_details_, other->prototype_details_);
    blueprint_entries_.Swap(&other->blueprint_entries_);
    ingredients_.Swap(&other->ingredients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManufacturingSchematicItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManufacturingSchematicItem_descriptor_;
  metadata.reflection = ManufacturingSchematicItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IngredientItem::kRequiredQuantityFieldNumber;
const int IngredientItem::kIdenticalFieldNumber;
const int IngredientItem::kIngredientSlotNameFieldNumber;
const int IngredientItem::kIngredientFieldNumber;
#endif  // !_MSC_VER

IngredientItem::IngredientItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IngredientItem::InitAsDefaultInstance() {
  ingredient_ = const_cast< ::swgemurpcserver::rpc::CharacterInventoryItem*>(&::swgemurpcserver::rpc::CharacterInventoryItem::default_instance());
}

IngredientItem::IngredientItem(const IngredientItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IngredientItem::SharedCtor() {
  _cached_size_ = 0;
  required_quantity_ = 0;
  identical_ = false;
  ingredient_slot_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ingredient_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IngredientItem::~IngredientItem() {
  SharedDtor();
}

void IngredientItem::SharedDtor() {
  if (ingredient_slot_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ingredient_slot_name_;
  }
  if (this != default_instance_) {
    delete ingredient_;
  }
}

void IngredientItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IngredientItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IngredientItem_descriptor_;
}

const IngredientItem& IngredientItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

IngredientItem* IngredientItem::default_instance_ = NULL;

IngredientItem* IngredientItem::New() const {
  return new IngredientItem;
}

void IngredientItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    required_quantity_ = 0;
    identical_ = false;
    if (has_ingredient_slot_name()) {
      if (ingredient_slot_name_ != &::google::protobuf::internal::kEmptyString) {
        ingredient_slot_name_->clear();
      }
    }
    if (has_ingredient()) {
      if (ingredient_ != NULL) ingredient_->::swgemurpcserver::rpc::CharacterInventoryItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IngredientItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 required_quantity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_quantity_)));
          set_has_required_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_identical;
        break;
      }

      // required bool identical = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &identical_)));
          set_has_identical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ingredient_slot_name;
        break;
      }

      // required string ingredient_slot_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingredient_slot_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ingredient_slot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ingredient_slot_name().data(), this->ingredient_slot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ingredient;
        break;
      }

      // required .swgemurpcserver.rpc.CharacterInventoryItem ingredient = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ingredient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ingredient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IngredientItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 required_quantity = 1;
  if (has_required_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->required_quantity(), output);
  }

  // required bool identical = 2;
  if (has_identical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->identical(), output);
  }

  // required string ingredient_slot_name = 3;
  if (has_ingredient_slot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ingredient_slot_name().data(), this->ingredient_slot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ingredient_slot_name(), output);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem ingredient = 4;
  if (has_ingredient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ingredient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IngredientItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 required_quantity = 1;
  if (has_required_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->required_quantity(), target);
  }

  // required bool identical = 2;
  if (has_identical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->identical(), target);
  }

  // required string ingredient_slot_name = 3;
  if (has_ingredient_slot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ingredient_slot_name().data(), this->ingredient_slot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ingredient_slot_name(), target);
  }

  // required .swgemurpcserver.rpc.CharacterInventoryItem ingredient = 4;
  if (has_ingredient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ingredient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IngredientItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 required_quantity = 1;
    if (has_required_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->required_quantity());
    }

    // required bool identical = 2;
    if (has_identical()) {
      total_size += 1 + 1;
    }

    // required string ingredient_slot_name = 3;
    if (has_ingredient_slot_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ingredient_slot_name());
    }

    // required .swgemurpcserver.rpc.CharacterInventoryItem ingredient = 4;
    if (has_ingredient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ingredient());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IngredientItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IngredientItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IngredientItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IngredientItem::MergeFrom(const IngredientItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_required_quantity()) {
      set_required_quantity(from.required_quantity());
    }
    if (from.has_identical()) {
      set_identical(from.identical());
    }
    if (from.has_ingredient_slot_name()) {
      set_ingredient_slot_name(from.ingredient_slot_name());
    }
    if (from.has_ingredient()) {
      mutable_ingredient()->::swgemurpcserver::rpc::CharacterInventoryItem::MergeFrom(from.ingredient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IngredientItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngredientItem::CopyFrom(const IngredientItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngredientItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_ingredient()) {
    if (!this->ingredient().IsInitialized()) return false;
  }
  return true;
}

void IngredientItem::Swap(IngredientItem* other) {
  if (other != this) {
    std::swap(required_quantity_, other->required_quantity_);
    std::swap(identical_, other->identical_);
    std::swap(ingredient_slot_name_, other->ingredient_slot_name_);
    std::swap(ingredient_, other->ingredient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IngredientItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IngredientItem_descriptor_;
  metadata.reflection = IngredientItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlueprintEntryItem::kTypeFieldNumber;
const int BlueprintEntryItem::kKeyFieldNumber;
const int BlueprintEntryItem::kSerialFieldNumber;
const int BlueprintEntryItem::kDisplayNameFieldNumber;
const int BlueprintEntryItem::kQuantityFieldNumber;
const int BlueprintEntryItem::kIdenticalFieldNumber;
#endif  // !_MSC_VER

BlueprintEntryItem::BlueprintEntryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlueprintEntryItem::InitAsDefaultInstance() {
}

BlueprintEntryItem::BlueprintEntryItem(const BlueprintEntryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlueprintEntryItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = 0;
  identical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueprintEntryItem::~BlueprintEntryItem() {
  SharedDtor();
}

void BlueprintEntryItem::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (serial_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (this != default_instance_) {
  }
}

void BlueprintEntryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueprintEntryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueprintEntryItem_descriptor_;
}

const BlueprintEntryItem& BlueprintEntryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InventoryItem_2eproto();
  return *default_instance_;
}

BlueprintEntryItem* BlueprintEntryItem::default_instance_ = NULL;

BlueprintEntryItem* BlueprintEntryItem::New() const {
  return new BlueprintEntryItem;
}

void BlueprintEntryItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_serial()) {
      if (serial_ != &::google::protobuf::internal::kEmptyString) {
        serial_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    quantity_ = 0;
    identical_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlueprintEntryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serial;
        break;
      }

      // required string serial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_display_name;
        break;
      }

      // required string display_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quantity;
        break;
      }

      // required int32 quantity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_identical;
        break;
      }

      // required bool identical = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &identical_)));
          set_has_identical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueprintEntryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // required string serial = 3;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->serial(), output);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->display_name(), output);
  }

  // required int32 quantity = 5;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quantity(), output);
  }

  // required bool identical = 6;
  if (has_identical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->identical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlueprintEntryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // required string serial = 3;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serial(), target);
  }

  // required string display_name = 4;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_name(), target);
  }

  // required int32 quantity = 5;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quantity(), target);
  }

  // required bool identical = 6;
  if (has_identical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->identical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlueprintEntryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string serial = 3;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }

    // required string display_name = 4;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required int32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // required bool identical = 6;
    if (has_identical()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueprintEntryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlueprintEntryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlueprintEntryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlueprintEntryItem::MergeFrom(const BlueprintEntryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_identical()) {
      set_identical(from.identical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlueprintEntryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueprintEntryItem::CopyFrom(const BlueprintEntryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueprintEntryItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BlueprintEntryItem::Swap(BlueprintEntryItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(serial_, other->serial_);
    std::swap(display_name_, other->display_name_);
    std::swap(quantity_, other->quantity_);
    std::swap(identical_, other->identical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlueprintEntryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueprintEntryItem_descriptor_;
  metadata.reflection = BlueprintEntryItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace swgemurpcserver

// @@protoc_insertion_point(global_scope)
