// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountRequest.proto

#ifndef PROTOBUF_AccountRequest_2eproto__INCLUDED
#define PROTOBUF_AccountRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace swgemurpcserver {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AccountRequest_2eproto();
void protobuf_AssignDesc_AccountRequest_2eproto();
void protobuf_ShutdownFile_AccountRequest_2eproto();

class GetAccountRequest;
class SWGEmuAccountCharacter;
class SWGEmuAccount;
class GetAccountResponse;

enum GetAccountRequest_SearchType {
  GetAccountRequest_SearchType_ACCOUNTID = 0,
  GetAccountRequest_SearchType_ACCOUNTNAME = 1
};
bool GetAccountRequest_SearchType_IsValid(int value);
const GetAccountRequest_SearchType GetAccountRequest_SearchType_SearchType_MIN = GetAccountRequest_SearchType_ACCOUNTID;
const GetAccountRequest_SearchType GetAccountRequest_SearchType_SearchType_MAX = GetAccountRequest_SearchType_ACCOUNTNAME;
const int GetAccountRequest_SearchType_SearchType_ARRAYSIZE = GetAccountRequest_SearchType_SearchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetAccountRequest_SearchType_descriptor();
inline const ::std::string& GetAccountRequest_SearchType_Name(GetAccountRequest_SearchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetAccountRequest_SearchType_descriptor(), value);
}
inline bool GetAccountRequest_SearchType_Parse(
    const ::std::string& name, GetAccountRequest_SearchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetAccountRequest_SearchType>(
    GetAccountRequest_SearchType_descriptor(), name, value);
}
// ===================================================================

class GetAccountRequest : public ::google::protobuf::Message {
 public:
  GetAccountRequest();
  virtual ~GetAccountRequest();

  GetAccountRequest(const GetAccountRequest& from);

  inline GetAccountRequest& operator=(const GetAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountRequest& default_instance();

  void Swap(GetAccountRequest* other);

  // implements Message ----------------------------------------------

  GetAccountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountRequest& from);
  void MergeFrom(const GetAccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetAccountRequest_SearchType SearchType;
  static const SearchType ACCOUNTID = GetAccountRequest_SearchType_ACCOUNTID;
  static const SearchType ACCOUNTNAME = GetAccountRequest_SearchType_ACCOUNTNAME;
  static inline bool SearchType_IsValid(int value) {
    return GetAccountRequest_SearchType_IsValid(value);
  }
  static const SearchType SearchType_MIN =
    GetAccountRequest_SearchType_SearchType_MIN;
  static const SearchType SearchType_MAX =
    GetAccountRequest_SearchType_SearchType_MAX;
  static const int SearchType_ARRAYSIZE =
    GetAccountRequest_SearchType_SearchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SearchType_descriptor() {
    return GetAccountRequest_SearchType_descriptor();
  }
  static inline const ::std::string& SearchType_Name(SearchType value) {
    return GetAccountRequest_SearchType_Name(value);
  }
  static inline bool SearchType_Parse(const ::std::string& name,
      SearchType* value) {
    return GetAccountRequest_SearchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
  inline bool has_search_type() const;
  inline void clear_search_type();
  static const int kSearchTypeFieldNumber = 1;
  inline ::swgemurpcserver::rpc::GetAccountRequest_SearchType search_type() const;
  inline void set_search_type(::swgemurpcserver::rpc::GetAccountRequest_SearchType value);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional fixed32 account_id = 4;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 4;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:swgemurpcserver.rpc.GetAccountRequest)
 private:
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  int search_type_;
  ::google::protobuf::uint32 account_id_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AccountRequest_2eproto();
  friend void protobuf_AssignDesc_AccountRequest_2eproto();
  friend void protobuf_ShutdownFile_AccountRequest_2eproto();

  void InitAsDefaultInstance();
  static GetAccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class SWGEmuAccountCharacter : public ::google::protobuf::Message {
 public:
  SWGEmuAccountCharacter();
  virtual ~SWGEmuAccountCharacter();

  SWGEmuAccountCharacter(const SWGEmuAccountCharacter& from);

  inline SWGEmuAccountCharacter& operator=(const SWGEmuAccountCharacter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SWGEmuAccountCharacter& default_instance();

  void Swap(SWGEmuAccountCharacter* other);

  // implements Message ----------------------------------------------

  SWGEmuAccountCharacter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWGEmuAccountCharacter& from);
  void MergeFrom(const SWGEmuAccountCharacter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline ::google::protobuf::uint64 object_id() const;
  inline void set_object_id(::google::protobuf::uint64 value);

  // required fixed32 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // required fixed32 galaxy_id = 3;
  inline bool has_galaxy_id() const;
  inline void clear_galaxy_id();
  static const int kGalaxyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 galaxy_id() const;
  inline void set_galaxy_id(::google::protobuf::uint32 value);

  // required fixed64 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // required fixed32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // required fixed32 race = 6;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 6;
  inline ::google::protobuf::uint32 race() const;
  inline void set_race(::google::protobuf::uint32 value);

  // required string first_name = 7;
  inline bool has_first_name() const;
  inline void clear_first_name();
  static const int kFirstNameFieldNumber = 7;
  inline const ::std::string& first_name() const;
  inline void set_first_name(const ::std::string& value);
  inline void set_first_name(const char* value);
  inline void set_first_name(const char* value, size_t size);
  inline ::std::string* mutable_first_name();
  inline ::std::string* release_first_name();
  inline void set_allocated_first_name(::std::string* first_name);

  // required string sur_name = 8;
  inline bool has_sur_name() const;
  inline void clear_sur_name();
  static const int kSurNameFieldNumber = 8;
  inline const ::std::string& sur_name() const;
  inline void set_sur_name(const ::std::string& value);
  inline void set_sur_name(const char* value);
  inline void set_sur_name(const char* value, size_t size);
  inline ::std::string* mutable_sur_name();
  inline ::std::string* release_sur_name();
  inline void set_allocated_sur_name(::std::string* sur_name);

  // required string galaxy_name = 9;
  inline bool has_galaxy_name() const;
  inline void clear_galaxy_name();
  static const int kGalaxyNameFieldNumber = 9;
  inline const ::std::string& galaxy_name() const;
  inline void set_galaxy_name(const ::std::string& value);
  inline void set_galaxy_name(const char* value);
  inline void set_galaxy_name(const char* value, size_t size);
  inline ::std::string* mutable_galaxy_name();
  inline ::std::string* release_galaxy_name();
  inline void set_allocated_galaxy_name(::std::string* galaxy_name);

  // optional bool banned = 10 [default = false];
  inline bool has_banned() const;
  inline void clear_banned();
  static const int kBannedFieldNumber = 10;
  inline bool banned() const;
  inline void set_banned(bool value);

  // optional fixed32 ban_expiration = 11;
  inline bool has_ban_expiration() const;
  inline void clear_ban_expiration();
  static const int kBanExpirationFieldNumber = 11;
  inline ::google::protobuf::uint32 ban_expiration() const;
  inline void set_ban_expiration(::google::protobuf::uint32 value);

  // optional string ban_reason = 12;
  inline bool has_ban_reason() const;
  inline void clear_ban_reason();
  static const int kBanReasonFieldNumber = 12;
  inline const ::std::string& ban_reason() const;
  inline void set_ban_reason(const ::std::string& value);
  inline void set_ban_reason(const char* value);
  inline void set_ban_reason(const char* value, size_t size);
  inline ::std::string* mutable_ban_reason();
  inline ::std::string* release_ban_reason();
  inline void set_allocated_ban_reason(::std::string* ban_reason);

  // optional string inventory = 13;
  inline bool has_inventory() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 13;
  inline const ::std::string& inventory() const;
  inline void set_inventory(const ::std::string& value);
  inline void set_inventory(const char* value);
  inline void set_inventory(const char* value, size_t size);
  inline ::std::string* mutable_inventory();
  inline ::std::string* release_inventory();
  inline void set_allocated_inventory(::std::string* inventory);

  // @@protoc_insertion_point(class_scope:swgemurpcserver.rpc.SWGEmuAccountCharacter)
 private:
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_galaxy_id();
  inline void clear_has_galaxy_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_first_name();
  inline void clear_has_first_name();
  inline void set_has_sur_name();
  inline void clear_has_sur_name();
  inline void set_has_galaxy_name();
  inline void clear_has_galaxy_name();
  inline void set_has_banned();
  inline void clear_has_banned();
  inline void set_has_ban_expiration();
  inline void clear_has_ban_expiration();
  inline void set_has_ban_reason();
  inline void clear_has_ban_reason();
  inline void set_has_inventory();
  inline void clear_has_inventory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 object_id_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 galaxy_id_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 race_;
  ::std::string* first_name_;
  ::std::string* sur_name_;
  ::std::string* galaxy_name_;
  bool banned_;
  ::google::protobuf::uint32 ban_expiration_;
  ::std::string* ban_reason_;
  ::std::string* inventory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_AccountRequest_2eproto();
  friend void protobuf_AssignDesc_AccountRequest_2eproto();
  friend void protobuf_ShutdownFile_AccountRequest_2eproto();

  void InitAsDefaultInstance();
  static SWGEmuAccountCharacter* default_instance_;
};
// -------------------------------------------------------------------

class SWGEmuAccount : public ::google::protobuf::Message {
 public:
  SWGEmuAccount();
  virtual ~SWGEmuAccount();

  SWGEmuAccount(const SWGEmuAccount& from);

  inline SWGEmuAccount& operator=(const SWGEmuAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SWGEmuAccount& default_instance();

  void Swap(SWGEmuAccount* other);

  // implements Message ----------------------------------------------

  SWGEmuAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWGEmuAccount& from);
  void MergeFrom(const SWGEmuAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 account_id() const;
  inline void set_account_id(::google::protobuf::uint32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required bool active = 3;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline bool active() const;
  inline void set_active(bool value);

  // required fixed32 created_time = 4;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 created_time() const;
  inline void set_created_time(::google::protobuf::uint32 value);

  // optional fixed32 admin_level = 5;
  inline bool has_admin_level() const;
  inline void clear_admin_level();
  static const int kAdminLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 admin_level() const;
  inline void set_admin_level(::google::protobuf::uint32 value);

  // repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
  inline int characters_size() const;
  inline void clear_characters();
  static const int kCharactersFieldNumber = 10;
  inline const ::swgemurpcserver::rpc::SWGEmuAccountCharacter& characters(int index) const;
  inline ::swgemurpcserver::rpc::SWGEmuAccountCharacter* mutable_characters(int index);
  inline ::swgemurpcserver::rpc::SWGEmuAccountCharacter* add_characters();
  inline const ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccountCharacter >&
      characters() const;
  inline ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccountCharacter >*
      mutable_characters();

  // @@protoc_insertion_point(class_scope:swgemurpcserver.rpc.SWGEmuAccount)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_admin_level();
  inline void clear_has_admin_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::uint32 account_id_;
  bool active_;
  ::google::protobuf::uint32 created_time_;
  ::google::protobuf::uint32 admin_level_;
  ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccountCharacter > characters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_AccountRequest_2eproto();
  friend void protobuf_AssignDesc_AccountRequest_2eproto();
  friend void protobuf_ShutdownFile_AccountRequest_2eproto();

  void InitAsDefaultInstance();
  static SWGEmuAccount* default_instance_;
};
// -------------------------------------------------------------------

class GetAccountResponse : public ::google::protobuf::Message {
 public:
  GetAccountResponse();
  virtual ~GetAccountResponse();

  GetAccountResponse(const GetAccountResponse& from);

  inline GetAccountResponse& operator=(const GetAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountResponse& default_instance();

  void Swap(GetAccountResponse* other);

  // implements Message ----------------------------------------------

  GetAccountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccountResponse& from);
  void MergeFrom(const GetAccountResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
  inline int accounts_size() const;
  inline void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  inline const ::swgemurpcserver::rpc::SWGEmuAccount& accounts(int index) const;
  inline ::swgemurpcserver::rpc::SWGEmuAccount* mutable_accounts(int index);
  inline ::swgemurpcserver::rpc::SWGEmuAccount* add_accounts();
  inline const ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccount >&
      accounts() const;
  inline ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccount >*
      mutable_accounts();

  // optional bool valid_password = 2;
  inline bool has_valid_password() const;
  inline void clear_valid_password();
  static const int kValidPasswordFieldNumber = 2;
  inline bool valid_password() const;
  inline void set_valid_password(bool value);

  // @@protoc_insertion_point(class_scope:swgemurpcserver.rpc.GetAccountResponse)
 private:
  inline void set_has_valid_password();
  inline void clear_has_valid_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccount > accounts_;
  bool valid_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AccountRequest_2eproto();
  friend void protobuf_AssignDesc_AccountRequest_2eproto();
  friend void protobuf_ShutdownFile_AccountRequest_2eproto();

  void InitAsDefaultInstance();
  static GetAccountResponse* default_instance_;
};
// ===================================================================

class SWGEmuAccountService_Stub;

class SWGEmuAccountService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SWGEmuAccountService() {};
 public:
  virtual ~SWGEmuAccountService();

  typedef SWGEmuAccountService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetAccount(::google::protobuf::RpcController* controller,
                       const ::swgemurpcserver::rpc::GetAccountRequest* request,
                       ::swgemurpcserver::rpc::GetAccountResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SWGEmuAccountService);
};

class SWGEmuAccountService_Stub : public SWGEmuAccountService {
 public:
  SWGEmuAccountService_Stub(::google::protobuf::RpcChannel* channel);
  SWGEmuAccountService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SWGEmuAccountService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SWGEmuAccountService ------------------------------------------

  void GetAccount(::google::protobuf::RpcController* controller,
                       const ::swgemurpcserver::rpc::GetAccountRequest* request,
                       ::swgemurpcserver::rpc::GetAccountResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SWGEmuAccountService_Stub);
};


// ===================================================================


// ===================================================================

// GetAccountRequest

// required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
inline bool GetAccountRequest::has_search_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccountRequest::set_has_search_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccountRequest::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccountRequest::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
inline ::swgemurpcserver::rpc::GetAccountRequest_SearchType GetAccountRequest::search_type() const {
  return static_cast< ::swgemurpcserver::rpc::GetAccountRequest_SearchType >(search_type_);
}
inline void GetAccountRequest::set_search_type(::swgemurpcserver::rpc::GetAccountRequest_SearchType value) {
  assert(::swgemurpcserver::rpc::GetAccountRequest_SearchType_IsValid(value));
  set_has_search_type();
  search_type_ = value;
}

// optional string user_name = 2;
inline bool GetAccountRequest::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountRequest::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountRequest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountRequest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& GetAccountRequest::user_name() const {
  return *user_name_;
}
inline void GetAccountRequest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void GetAccountRequest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void GetAccountRequest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountRequest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* GetAccountRequest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool GetAccountRequest::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetAccountRequest::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetAccountRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetAccountRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& GetAccountRequest::password() const {
  return *password_;
}
inline void GetAccountRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GetAccountRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GetAccountRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAccountRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* GetAccountRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAccountRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 account_id = 4;
inline bool GetAccountRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetAccountRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetAccountRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetAccountRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 GetAccountRequest::account_id() const {
  return account_id_;
}
inline void GetAccountRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// -------------------------------------------------------------------

// SWGEmuAccountCharacter

// required fixed64 object_id = 1;
inline bool SWGEmuAccountCharacter::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWGEmuAccountCharacter::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWGEmuAccountCharacter::clear_object_id() {
  object_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_id();
}
inline ::google::protobuf::uint64 SWGEmuAccountCharacter::object_id() const {
  return object_id_;
}
inline void SWGEmuAccountCharacter::set_object_id(::google::protobuf::uint64 value) {
  set_has_object_id();
  object_id_ = value;
}

// required fixed32 account_id = 2;
inline bool SWGEmuAccountCharacter::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWGEmuAccountCharacter::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWGEmuAccountCharacter::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 SWGEmuAccountCharacter::account_id() const {
  return account_id_;
}
inline void SWGEmuAccountCharacter::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// required fixed32 galaxy_id = 3;
inline bool SWGEmuAccountCharacter::has_galaxy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_galaxy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SWGEmuAccountCharacter::clear_has_galaxy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SWGEmuAccountCharacter::clear_galaxy_id() {
  galaxy_id_ = 0u;
  clear_has_galaxy_id();
}
inline ::google::protobuf::uint32 SWGEmuAccountCharacter::galaxy_id() const {
  return galaxy_id_;
}
inline void SWGEmuAccountCharacter::set_galaxy_id(::google::protobuf::uint32 value) {
  set_has_galaxy_id();
  galaxy_id_ = value;
}

// required fixed64 create_time = 4;
inline bool SWGEmuAccountCharacter::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SWGEmuAccountCharacter::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SWGEmuAccountCharacter::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 SWGEmuAccountCharacter::create_time() const {
  return create_time_;
}
inline void SWGEmuAccountCharacter::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// required fixed32 gender = 5;
inline bool SWGEmuAccountCharacter::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SWGEmuAccountCharacter::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SWGEmuAccountCharacter::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 SWGEmuAccountCharacter::gender() const {
  return gender_;
}
inline void SWGEmuAccountCharacter::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required fixed32 race = 6;
inline bool SWGEmuAccountCharacter::has_race() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_race() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SWGEmuAccountCharacter::clear_has_race() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SWGEmuAccountCharacter::clear_race() {
  race_ = 0u;
  clear_has_race();
}
inline ::google::protobuf::uint32 SWGEmuAccountCharacter::race() const {
  return race_;
}
inline void SWGEmuAccountCharacter::set_race(::google::protobuf::uint32 value) {
  set_has_race();
  race_ = value;
}

// required string first_name = 7;
inline bool SWGEmuAccountCharacter::has_first_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_first_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SWGEmuAccountCharacter::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SWGEmuAccountCharacter::clear_first_name() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    first_name_->clear();
  }
  clear_has_first_name();
}
inline const ::std::string& SWGEmuAccountCharacter::first_name() const {
  return *first_name_;
}
inline void SWGEmuAccountCharacter::set_first_name(const ::std::string& value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_first_name(const char* value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccountCharacter::mutable_first_name() {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  return first_name_;
}
inline ::std::string* SWGEmuAccountCharacter::release_first_name() {
  clear_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = first_name_;
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccountCharacter::set_allocated_first_name(::std::string* first_name) {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (first_name) {
    set_has_first_name();
    first_name_ = first_name;
  } else {
    clear_has_first_name();
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sur_name = 8;
inline bool SWGEmuAccountCharacter::has_sur_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_sur_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SWGEmuAccountCharacter::clear_has_sur_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SWGEmuAccountCharacter::clear_sur_name() {
  if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
    sur_name_->clear();
  }
  clear_has_sur_name();
}
inline const ::std::string& SWGEmuAccountCharacter::sur_name() const {
  return *sur_name_;
}
inline void SWGEmuAccountCharacter::set_sur_name(const ::std::string& value) {
  set_has_sur_name();
  if (sur_name_ == &::google::protobuf::internal::kEmptyString) {
    sur_name_ = new ::std::string;
  }
  sur_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_sur_name(const char* value) {
  set_has_sur_name();
  if (sur_name_ == &::google::protobuf::internal::kEmptyString) {
    sur_name_ = new ::std::string;
  }
  sur_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_sur_name(const char* value, size_t size) {
  set_has_sur_name();
  if (sur_name_ == &::google::protobuf::internal::kEmptyString) {
    sur_name_ = new ::std::string;
  }
  sur_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccountCharacter::mutable_sur_name() {
  set_has_sur_name();
  if (sur_name_ == &::google::protobuf::internal::kEmptyString) {
    sur_name_ = new ::std::string;
  }
  return sur_name_;
}
inline ::std::string* SWGEmuAccountCharacter::release_sur_name() {
  clear_has_sur_name();
  if (sur_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sur_name_;
    sur_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccountCharacter::set_allocated_sur_name(::std::string* sur_name) {
  if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sur_name_;
  }
  if (sur_name) {
    set_has_sur_name();
    sur_name_ = sur_name;
  } else {
    clear_has_sur_name();
    sur_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string galaxy_name = 9;
inline bool SWGEmuAccountCharacter::has_galaxy_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_galaxy_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SWGEmuAccountCharacter::clear_has_galaxy_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SWGEmuAccountCharacter::clear_galaxy_name() {
  if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
    galaxy_name_->clear();
  }
  clear_has_galaxy_name();
}
inline const ::std::string& SWGEmuAccountCharacter::galaxy_name() const {
  return *galaxy_name_;
}
inline void SWGEmuAccountCharacter::set_galaxy_name(const ::std::string& value) {
  set_has_galaxy_name();
  if (galaxy_name_ == &::google::protobuf::internal::kEmptyString) {
    galaxy_name_ = new ::std::string;
  }
  galaxy_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_galaxy_name(const char* value) {
  set_has_galaxy_name();
  if (galaxy_name_ == &::google::protobuf::internal::kEmptyString) {
    galaxy_name_ = new ::std::string;
  }
  galaxy_name_->assign(value);
}
inline void SWGEmuAccountCharacter::set_galaxy_name(const char* value, size_t size) {
  set_has_galaxy_name();
  if (galaxy_name_ == &::google::protobuf::internal::kEmptyString) {
    galaxy_name_ = new ::std::string;
  }
  galaxy_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccountCharacter::mutable_galaxy_name() {
  set_has_galaxy_name();
  if (galaxy_name_ == &::google::protobuf::internal::kEmptyString) {
    galaxy_name_ = new ::std::string;
  }
  return galaxy_name_;
}
inline ::std::string* SWGEmuAccountCharacter::release_galaxy_name() {
  clear_has_galaxy_name();
  if (galaxy_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = galaxy_name_;
    galaxy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccountCharacter::set_allocated_galaxy_name(::std::string* galaxy_name) {
  if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete galaxy_name_;
  }
  if (galaxy_name) {
    set_has_galaxy_name();
    galaxy_name_ = galaxy_name;
  } else {
    clear_has_galaxy_name();
    galaxy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool banned = 10 [default = false];
inline bool SWGEmuAccountCharacter::has_banned() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_banned() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SWGEmuAccountCharacter::clear_has_banned() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SWGEmuAccountCharacter::clear_banned() {
  banned_ = false;
  clear_has_banned();
}
inline bool SWGEmuAccountCharacter::banned() const {
  return banned_;
}
inline void SWGEmuAccountCharacter::set_banned(bool value) {
  set_has_banned();
  banned_ = value;
}

// optional fixed32 ban_expiration = 11;
inline bool SWGEmuAccountCharacter::has_ban_expiration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_ban_expiration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SWGEmuAccountCharacter::clear_has_ban_expiration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SWGEmuAccountCharacter::clear_ban_expiration() {
  ban_expiration_ = 0u;
  clear_has_ban_expiration();
}
inline ::google::protobuf::uint32 SWGEmuAccountCharacter::ban_expiration() const {
  return ban_expiration_;
}
inline void SWGEmuAccountCharacter::set_ban_expiration(::google::protobuf::uint32 value) {
  set_has_ban_expiration();
  ban_expiration_ = value;
}

// optional string ban_reason = 12;
inline bool SWGEmuAccountCharacter::has_ban_reason() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_ban_reason() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SWGEmuAccountCharacter::clear_has_ban_reason() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SWGEmuAccountCharacter::clear_ban_reason() {
  if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
    ban_reason_->clear();
  }
  clear_has_ban_reason();
}
inline const ::std::string& SWGEmuAccountCharacter::ban_reason() const {
  return *ban_reason_;
}
inline void SWGEmuAccountCharacter::set_ban_reason(const ::std::string& value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
}
inline void SWGEmuAccountCharacter::set_ban_reason(const char* value) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(value);
}
inline void SWGEmuAccountCharacter::set_ban_reason(const char* value, size_t size) {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  ban_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccountCharacter::mutable_ban_reason() {
  set_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    ban_reason_ = new ::std::string;
  }
  return ban_reason_;
}
inline ::std::string* SWGEmuAccountCharacter::release_ban_reason() {
  clear_has_ban_reason();
  if (ban_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ban_reason_;
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccountCharacter::set_allocated_ban_reason(::std::string* ban_reason) {
  if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete ban_reason_;
  }
  if (ban_reason) {
    set_has_ban_reason();
    ban_reason_ = ban_reason;
  } else {
    clear_has_ban_reason();
    ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string inventory = 13;
inline bool SWGEmuAccountCharacter::has_inventory() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SWGEmuAccountCharacter::set_has_inventory() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SWGEmuAccountCharacter::clear_has_inventory() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SWGEmuAccountCharacter::clear_inventory() {
  if (inventory_ != &::google::protobuf::internal::kEmptyString) {
    inventory_->clear();
  }
  clear_has_inventory();
}
inline const ::std::string& SWGEmuAccountCharacter::inventory() const {
  return *inventory_;
}
inline void SWGEmuAccountCharacter::set_inventory(const ::std::string& value) {
  set_has_inventory();
  if (inventory_ == &::google::protobuf::internal::kEmptyString) {
    inventory_ = new ::std::string;
  }
  inventory_->assign(value);
}
inline void SWGEmuAccountCharacter::set_inventory(const char* value) {
  set_has_inventory();
  if (inventory_ == &::google::protobuf::internal::kEmptyString) {
    inventory_ = new ::std::string;
  }
  inventory_->assign(value);
}
inline void SWGEmuAccountCharacter::set_inventory(const char* value, size_t size) {
  set_has_inventory();
  if (inventory_ == &::google::protobuf::internal::kEmptyString) {
    inventory_ = new ::std::string;
  }
  inventory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccountCharacter::mutable_inventory() {
  set_has_inventory();
  if (inventory_ == &::google::protobuf::internal::kEmptyString) {
    inventory_ = new ::std::string;
  }
  return inventory_;
}
inline ::std::string* SWGEmuAccountCharacter::release_inventory() {
  clear_has_inventory();
  if (inventory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inventory_;
    inventory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccountCharacter::set_allocated_inventory(::std::string* inventory) {
  if (inventory_ != &::google::protobuf::internal::kEmptyString) {
    delete inventory_;
  }
  if (inventory) {
    set_has_inventory();
    inventory_ = inventory;
  } else {
    clear_has_inventory();
    inventory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SWGEmuAccount

// required fixed32 account_id = 1;
inline bool SWGEmuAccount::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWGEmuAccount::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWGEmuAccount::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWGEmuAccount::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 SWGEmuAccount::account_id() const {
  return account_id_;
}
inline void SWGEmuAccount::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
}

// required string user_name = 2;
inline bool SWGEmuAccount::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWGEmuAccount::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWGEmuAccount::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWGEmuAccount::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& SWGEmuAccount::user_name() const {
  return *user_name_;
}
inline void SWGEmuAccount::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SWGEmuAccount::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SWGEmuAccount::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWGEmuAccount::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* SWGEmuAccount::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SWGEmuAccount::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool active = 3;
inline bool SWGEmuAccount::has_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SWGEmuAccount::set_has_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SWGEmuAccount::clear_has_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SWGEmuAccount::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool SWGEmuAccount::active() const {
  return active_;
}
inline void SWGEmuAccount::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// required fixed32 created_time = 4;
inline bool SWGEmuAccount::has_created_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SWGEmuAccount::set_has_created_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SWGEmuAccount::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SWGEmuAccount::clear_created_time() {
  created_time_ = 0u;
  clear_has_created_time();
}
inline ::google::protobuf::uint32 SWGEmuAccount::created_time() const {
  return created_time_;
}
inline void SWGEmuAccount::set_created_time(::google::protobuf::uint32 value) {
  set_has_created_time();
  created_time_ = value;
}

// optional fixed32 admin_level = 5;
inline bool SWGEmuAccount::has_admin_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SWGEmuAccount::set_has_admin_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SWGEmuAccount::clear_has_admin_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SWGEmuAccount::clear_admin_level() {
  admin_level_ = 0u;
  clear_has_admin_level();
}
inline ::google::protobuf::uint32 SWGEmuAccount::admin_level() const {
  return admin_level_;
}
inline void SWGEmuAccount::set_admin_level(::google::protobuf::uint32 value) {
  set_has_admin_level();
  admin_level_ = value;
}

// repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
inline int SWGEmuAccount::characters_size() const {
  return characters_.size();
}
inline void SWGEmuAccount::clear_characters() {
  characters_.Clear();
}
inline const ::swgemurpcserver::rpc::SWGEmuAccountCharacter& SWGEmuAccount::characters(int index) const {
  return characters_.Get(index);
}
inline ::swgemurpcserver::rpc::SWGEmuAccountCharacter* SWGEmuAccount::mutable_characters(int index) {
  return characters_.Mutable(index);
}
inline ::swgemurpcserver::rpc::SWGEmuAccountCharacter* SWGEmuAccount::add_characters() {
  return characters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccountCharacter >&
SWGEmuAccount::characters() const {
  return characters_;
}
inline ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccountCharacter >*
SWGEmuAccount::mutable_characters() {
  return &characters_;
}

// -------------------------------------------------------------------

// GetAccountResponse

// repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
inline int GetAccountResponse::accounts_size() const {
  return accounts_.size();
}
inline void GetAccountResponse::clear_accounts() {
  accounts_.Clear();
}
inline const ::swgemurpcserver::rpc::SWGEmuAccount& GetAccountResponse::accounts(int index) const {
  return accounts_.Get(index);
}
inline ::swgemurpcserver::rpc::SWGEmuAccount* GetAccountResponse::mutable_accounts(int index) {
  return accounts_.Mutable(index);
}
inline ::swgemurpcserver::rpc::SWGEmuAccount* GetAccountResponse::add_accounts() {
  return accounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccount >&
GetAccountResponse::accounts() const {
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::swgemurpcserver::rpc::SWGEmuAccount >*
GetAccountResponse::mutable_accounts() {
  return &accounts_;
}

// optional bool valid_password = 2;
inline bool GetAccountResponse::has_valid_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccountResponse::set_has_valid_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccountResponse::clear_has_valid_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccountResponse::clear_valid_password() {
  valid_password_ = false;
  clear_has_valid_password();
}
inline bool GetAccountResponse::valid_password() const {
  return valid_password_;
}
inline void GetAccountResponse::set_valid_password(bool value) {
  set_has_valid_password();
  valid_password_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace swgemurpcserver

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::swgemurpcserver::rpc::GetAccountRequest_SearchType>() {
  return ::swgemurpcserver::rpc::GetAccountRequest_SearchType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AccountRequest_2eproto__INCLUDED
