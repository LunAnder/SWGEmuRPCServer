// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharacterDetails.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharacterDetails.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swgemurpcserver {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* SWGEmuCharacterDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWGEmuCharacterDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWGEmuCharacterStructureItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWGEmuCharacterStructureItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCharacterDetailsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCharacterDetailsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCharacterDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCharacterDetailsResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SWGEmuCharacterDetailsService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharacterDetails_2eproto() {
  protobuf_AddDesc_CharacterDetails_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharacterDetails.proto");
  GOOGLE_CHECK(file != NULL);
  SWGEmuCharacterDetail_descriptor_ = file->message_type(0);
  static const int SWGEmuCharacterDetail_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, sur_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, bank_credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, cash_credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, base_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, base_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, base_mind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, biography_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, remaining_plots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, maximumim_plots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, appearance_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, inventory_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, structures_),
  };
  SWGEmuCharacterDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWGEmuCharacterDetail_descriptor_,
      SWGEmuCharacterDetail::default_instance_,
      SWGEmuCharacterDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWGEmuCharacterDetail));
  SWGEmuCharacterStructureItem_descriptor_ = file->message_type(1);
  static const int SWGEmuCharacterStructureItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterStructureItem, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterStructureItem, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterStructureItem, display_name_),
  };
  SWGEmuCharacterStructureItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWGEmuCharacterStructureItem_descriptor_,
      SWGEmuCharacterStructureItem::default_instance_,
      SWGEmuCharacterStructureItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterStructureItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuCharacterStructureItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWGEmuCharacterStructureItem));
  GetCharacterDetailsRequest_descriptor_ = file->message_type(2);
  static const int GetCharacterDetailsRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, galaxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, sur_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, galaxy_name_),
  };
  GetCharacterDetailsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCharacterDetailsRequest_descriptor_,
      GetCharacterDetailsRequest::default_instance_,
      GetCharacterDetailsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCharacterDetailsRequest));
  GetCharacterDetailsResponse_descriptor_ = file->message_type(3);
  static const int GetCharacterDetailsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsResponse, character_details_),
  };
  GetCharacterDetailsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCharacterDetailsResponse_descriptor_,
      GetCharacterDetailsResponse::default_instance_,
      GetCharacterDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharacterDetailsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCharacterDetailsResponse));
  SWGEmuCharacterDetailsService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharacterDetails_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWGEmuCharacterDetail_descriptor_, &SWGEmuCharacterDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWGEmuCharacterStructureItem_descriptor_, &SWGEmuCharacterStructureItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCharacterDetailsRequest_descriptor_, &GetCharacterDetailsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCharacterDetailsResponse_descriptor_, &GetCharacterDetailsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharacterDetails_2eproto() {
  delete SWGEmuCharacterDetail::default_instance_;
  delete SWGEmuCharacterDetail_reflection_;
  delete SWGEmuCharacterStructureItem::default_instance_;
  delete SWGEmuCharacterStructureItem_reflection_;
  delete GetCharacterDetailsRequest::default_instance_;
  delete GetCharacterDetailsRequest_reflection_;
  delete GetCharacterDetailsResponse::default_instance_;
  delete GetCharacterDetailsResponse_reflection_;
}

void protobuf_AddDesc_CharacterDetails_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::swgemurpcserver::rpc::protobuf_AddDesc_InventoryItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CharacterDetails.proto\022\023swgemurpcserve"
    "r.rpc\032\023InventoryItem.proto\"\307\003\n\025SWGEmuCha"
    "racterDetail\022\021\n\tobject_id\030\001 \002(\006\022\022\n\naccou"
    "nt_id\030\002 \002(\007\022\022\n\nfirst_name\030\003 \002(\t\022\020\n\010sur_n"
    "ame\030\004 \002(\t\022\024\n\014bank_credits\030\005 \001(\007\022\024\n\014cash_"
    "credits\030\006 \001(\007\022\023\n\013base_health\030\007 \001(\007\022\023\n\013ba"
    "se_action\030\010 \001(\007\022\021\n\tbase_mind\030\n \001(\007\022\021\n\tbi"
    "ography\030\013 \001(\t\022\027\n\017remaining_plots\030\014 \001(\005\022\027"
    "\n\017maximumim_plots\030\r \001(\005\022\r\n\005title\030\016 \001(\t\022\027"
    "\n\017appearance_file\030\017 \001(\t\022D\n\017inventory_ite"
    "ms\030\024 \003(\0132+.swgemurpcserver.rpc.Character"
    "InventoryItem\022E\n\nstructures\030\025 \003(\01321.swge"
    "murpcserver.rpc.SWGEmuCharacterStructure"
    "Item\"\\\n\034SWGEmuCharacterStructureItem\022\021\n\t"
    "object_id\030\001 \002(\006\022\023\n\013object_name\030\002 \002(\t\022\024\n\014"
    "display_name\030\003 \002(\t\"\221\001\n\032GetCharacterDetai"
    "lsRequest\022\022\n\naccount_id\030\001 \002(\007\022\021\n\tobject_"
    "id\030\002 \001(\006\022\021\n\tgalaxy_id\030\003 \001(\007\022\022\n\nfirst_nam"
    "e\030\007 \001(\t\022\020\n\010sur_name\030\010 \001(\t\022\023\n\013galaxy_name"
    "\030\t \001(\t\"d\n\033GetCharacterDetailsResponse\022E\n"
    "\021character_details\030\001 \003(\0132*.swgemurpcserv"
    "er.rpc.SWGEmuCharacterDetail2\231\001\n\035SWGEmuC"
    "haracterDetailsService\022x\n\023GetCharacterDe"
    "tails\022/.swgemurpcserver.rpc.GetCharacter"
    "DetailsRequest\0320.swgemurpcserver.rpc.Get"
    "CharacterDetailsResponseB\003\200\001\001", 1029);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharacterDetails.proto", &protobuf_RegisterTypes);
  SWGEmuCharacterDetail::default_instance_ = new SWGEmuCharacterDetail();
  SWGEmuCharacterStructureItem::default_instance_ = new SWGEmuCharacterStructureItem();
  GetCharacterDetailsRequest::default_instance_ = new GetCharacterDetailsRequest();
  GetCharacterDetailsResponse::default_instance_ = new GetCharacterDetailsResponse();
  SWGEmuCharacterDetail::default_instance_->InitAsDefaultInstance();
  SWGEmuCharacterStructureItem::default_instance_->InitAsDefaultInstance();
  GetCharacterDetailsRequest::default_instance_->InitAsDefaultInstance();
  GetCharacterDetailsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharacterDetails_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharacterDetails_2eproto {
  StaticDescriptorInitializer_CharacterDetails_2eproto() {
    protobuf_AddDesc_CharacterDetails_2eproto();
  }
} static_descriptor_initializer_CharacterDetails_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SWGEmuCharacterDetail::kObjectIdFieldNumber;
const int SWGEmuCharacterDetail::kAccountIdFieldNumber;
const int SWGEmuCharacterDetail::kFirstNameFieldNumber;
const int SWGEmuCharacterDetail::kSurNameFieldNumber;
const int SWGEmuCharacterDetail::kBankCreditsFieldNumber;
const int SWGEmuCharacterDetail::kCashCreditsFieldNumber;
const int SWGEmuCharacterDetail::kBaseHealthFieldNumber;
const int SWGEmuCharacterDetail::kBaseActionFieldNumber;
const int SWGEmuCharacterDetail::kBaseMindFieldNumber;
const int SWGEmuCharacterDetail::kBiographyFieldNumber;
const int SWGEmuCharacterDetail::kRemainingPlotsFieldNumber;
const int SWGEmuCharacterDetail::kMaximumimPlotsFieldNumber;
const int SWGEmuCharacterDetail::kTitleFieldNumber;
const int SWGEmuCharacterDetail::kAppearanceFileFieldNumber;
const int SWGEmuCharacterDetail::kInventoryItemsFieldNumber;
const int SWGEmuCharacterDetail::kStructuresFieldNumber;
#endif  // !_MSC_VER

SWGEmuCharacterDetail::SWGEmuCharacterDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWGEmuCharacterDetail::InitAsDefaultInstance() {
}

SWGEmuCharacterDetail::SWGEmuCharacterDetail(const SWGEmuCharacterDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWGEmuCharacterDetail::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sur_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_credits_ = 0u;
  cash_credits_ = 0u;
  base_health_ = 0u;
  base_action_ = 0u;
  base_mind_ = 0u;
  biography_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remaining_plots_ = 0;
  maximumim_plots_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appearance_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWGEmuCharacterDetail::~SWGEmuCharacterDetail() {
  SharedDtor();
}

void SWGEmuCharacterDetail::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sur_name_;
  }
  if (biography_ != &::google::protobuf::internal::kEmptyString) {
    delete biography_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (appearance_file_ != &::google::protobuf::internal::kEmptyString) {
    delete appearance_file_;
  }
  if (this != default_instance_) {
  }
}

void SWGEmuCharacterDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWGEmuCharacterDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuCharacterDetail_descriptor_;
}

const SWGEmuCharacterDetail& SWGEmuCharacterDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharacterDetails_2eproto();
  return *default_instance_;
}

SWGEmuCharacterDetail* SWGEmuCharacterDetail::default_instance_ = NULL;

SWGEmuCharacterDetail* SWGEmuCharacterDetail::New() const {
  return new SWGEmuCharacterDetail;
}

void SWGEmuCharacterDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_sur_name()) {
      if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
        sur_name_->clear();
      }
    }
    bank_credits_ = 0u;
    cash_credits_ = 0u;
    base_health_ = 0u;
    base_action_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_mind_ = 0u;
    if (has_biography()) {
      if (biography_ != &::google::protobuf::internal::kEmptyString) {
        biography_->clear();
      }
    }
    remaining_plots_ = 0;
    maximumim_plots_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_appearance_file()) {
      if (appearance_file_ != &::google::protobuf::internal::kEmptyString) {
        appearance_file_->clear();
      }
    }
  }
  inventory_items_.Clear();
  structures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWGEmuCharacterDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_account_id;
        break;
      }

      // required fixed32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_first_name;
        break;
      }

      // required string first_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sur_name;
        break;
      }

      // required string sur_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sur_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sur_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sur_name().data(), this->sur_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bank_credits;
        break;
      }

      // optional fixed32 bank_credits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bank_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &bank_credits_)));
          set_has_bank_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cash_credits;
        break;
      }

      // optional fixed32 cash_credits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cash_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cash_credits_)));
          set_has_cash_credits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_base_health;
        break;
      }

      // optional fixed32 base_health = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &base_health_)));
          set_has_base_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_base_action;
        break;
      }

      // optional fixed32 base_action = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &base_action_)));
          set_has_base_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_base_mind;
        break;
      }

      // optional fixed32 base_mind = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_base_mind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &base_mind_)));
          set_has_base_mind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_biography;
        break;
      }

      // optional string biography = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_biography:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_biography()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->biography().data(), this->biography().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_remaining_plots;
        break;
      }

      // optional int32 remaining_plots = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining_plots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_plots_)));
          set_has_remaining_plots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maximumim_plots;
        break;
      }

      // optional int32 maximumim_plots = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maximumim_plots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximumim_plots_)));
          set_has_maximumim_plots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_title;
        break;
      }

      // optional string title = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_appearance_file;
        break;
      }

      // optional string appearance_file = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appearance_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appearance_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appearance_file().data(), this->appearance_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_inventory_items;
        break;
      }

      // repeated .swgemurpcserver.rpc.CharacterInventoryItem inventory_items = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inventory_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_inventory_items;
        if (input->ExpectTag(170)) goto parse_structures;
        break;
      }

      // repeated .swgemurpcserver.rpc.SWGEmuCharacterStructureItem structures = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_structures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_structures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWGEmuCharacterDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->account_id(), output);
  }

  // required string first_name = 3;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->first_name(), output);
  }

  // required string sur_name = 4;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sur_name(), output);
  }

  // optional fixed32 bank_credits = 5;
  if (has_bank_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->bank_credits(), output);
  }

  // optional fixed32 cash_credits = 6;
  if (has_cash_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->cash_credits(), output);
  }

  // optional fixed32 base_health = 7;
  if (has_base_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->base_health(), output);
  }

  // optional fixed32 base_action = 8;
  if (has_base_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->base_action(), output);
  }

  // optional fixed32 base_mind = 10;
  if (has_base_mind()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->base_mind(), output);
  }

  // optional string biography = 11;
  if (has_biography()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->biography().data(), this->biography().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->biography(), output);
  }

  // optional int32 remaining_plots = 12;
  if (has_remaining_plots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->remaining_plots(), output);
  }

  // optional int32 maximumim_plots = 13;
  if (has_maximumim_plots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maximumim_plots(), output);
  }

  // optional string title = 14;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->title(), output);
  }

  // optional string appearance_file = 15;
  if (has_appearance_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file().data(), this->appearance_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->appearance_file(), output);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem inventory_items = 20;
  for (int i = 0; i < this->inventory_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->inventory_items(i), output);
  }

  // repeated .swgemurpcserver.rpc.SWGEmuCharacterStructureItem structures = 21;
  for (int i = 0; i < this->structures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->structures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWGEmuCharacterDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->account_id(), target);
  }

  // required string first_name = 3;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->first_name(), target);
  }

  // required string sur_name = 4;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sur_name(), target);
  }

  // optional fixed32 bank_credits = 5;
  if (has_bank_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->bank_credits(), target);
  }

  // optional fixed32 cash_credits = 6;
  if (has_cash_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->cash_credits(), target);
  }

  // optional fixed32 base_health = 7;
  if (has_base_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->base_health(), target);
  }

  // optional fixed32 base_action = 8;
  if (has_base_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->base_action(), target);
  }

  // optional fixed32 base_mind = 10;
  if (has_base_mind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->base_mind(), target);
  }

  // optional string biography = 11;
  if (has_biography()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->biography().data(), this->biography().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->biography(), target);
  }

  // optional int32 remaining_plots = 12;
  if (has_remaining_plots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->remaining_plots(), target);
  }

  // optional int32 maximumim_plots = 13;
  if (has_maximumim_plots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maximumim_plots(), target);
  }

  // optional string title = 14;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->title(), target);
  }

  // optional string appearance_file = 15;
  if (has_appearance_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appearance_file().data(), this->appearance_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->appearance_file(), target);
  }

  // repeated .swgemurpcserver.rpc.CharacterInventoryItem inventory_items = 20;
  for (int i = 0; i < this->inventory_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->inventory_items(i), target);
  }

  // repeated .swgemurpcserver.rpc.SWGEmuCharacterStructureItem structures = 21;
  for (int i = 0; i < this->structures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->structures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWGEmuCharacterDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // required fixed32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // required string first_name = 3;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // required string sur_name = 4;
    if (has_sur_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sur_name());
    }

    // optional fixed32 bank_credits = 5;
    if (has_bank_credits()) {
      total_size += 1 + 4;
    }

    // optional fixed32 cash_credits = 6;
    if (has_cash_credits()) {
      total_size += 1 + 4;
    }

    // optional fixed32 base_health = 7;
    if (has_base_health()) {
      total_size += 1 + 4;
    }

    // optional fixed32 base_action = 8;
    if (has_base_action()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 base_mind = 10;
    if (has_base_mind()) {
      total_size += 1 + 4;
    }

    // optional string biography = 11;
    if (has_biography()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->biography());
    }

    // optional int32 remaining_plots = 12;
    if (has_remaining_plots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining_plots());
    }

    // optional int32 maximumim_plots = 13;
    if (has_maximumim_plots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximumim_plots());
    }

    // optional string title = 14;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string appearance_file = 15;
    if (has_appearance_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appearance_file());
    }

  }
  // repeated .swgemurpcserver.rpc.CharacterInventoryItem inventory_items = 20;
  total_size += 2 * this->inventory_items_size();
  for (int i = 0; i < this->inventory_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inventory_items(i));
  }

  // repeated .swgemurpcserver.rpc.SWGEmuCharacterStructureItem structures = 21;
  total_size += 2 * this->structures_size();
  for (int i = 0; i < this->structures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWGEmuCharacterDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWGEmuCharacterDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWGEmuCharacterDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWGEmuCharacterDetail::MergeFrom(const SWGEmuCharacterDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  inventory_items_.MergeFrom(from.inventory_items_);
  structures_.MergeFrom(from.structures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_sur_name()) {
      set_sur_name(from.sur_name());
    }
    if (from.has_bank_credits()) {
      set_bank_credits(from.bank_credits());
    }
    if (from.has_cash_credits()) {
      set_cash_credits(from.cash_credits());
    }
    if (from.has_base_health()) {
      set_base_health(from.base_health());
    }
    if (from.has_base_action()) {
      set_base_action(from.base_action());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_mind()) {
      set_base_mind(from.base_mind());
    }
    if (from.has_biography()) {
      set_biography(from.biography());
    }
    if (from.has_remaining_plots()) {
      set_remaining_plots(from.remaining_plots());
    }
    if (from.has_maximumim_plots()) {
      set_maximumim_plots(from.maximumim_plots());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_appearance_file()) {
      set_appearance_file(from.appearance_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWGEmuCharacterDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWGEmuCharacterDetail::CopyFrom(const SWGEmuCharacterDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWGEmuCharacterDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < inventory_items_size(); i++) {
    if (!this->inventory_items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < structures_size(); i++) {
    if (!this->structures(i).IsInitialized()) return false;
  }
  return true;
}

void SWGEmuCharacterDetail::Swap(SWGEmuCharacterDetail* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(first_name_, other->first_name_);
    std::swap(sur_name_, other->sur_name_);
    std::swap(bank_credits_, other->bank_credits_);
    std::swap(cash_credits_, other->cash_credits_);
    std::swap(base_health_, other->base_health_);
    std::swap(base_action_, other->base_action_);
    std::swap(base_mind_, other->base_mind_);
    std::swap(biography_, other->biography_);
    std::swap(remaining_plots_, other->remaining_plots_);
    std::swap(maximumim_plots_, other->maximumim_plots_);
    std::swap(title_, other->title_);
    std::swap(appearance_file_, other->appearance_file_);
    inventory_items_.Swap(&other->inventory_items_);
    structures_.Swap(&other->structures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWGEmuCharacterDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWGEmuCharacterDetail_descriptor_;
  metadata.reflection = SWGEmuCharacterDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWGEmuCharacterStructureItem::kObjectIdFieldNumber;
const int SWGEmuCharacterStructureItem::kObjectNameFieldNumber;
const int SWGEmuCharacterStructureItem::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

SWGEmuCharacterStructureItem::SWGEmuCharacterStructureItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWGEmuCharacterStructureItem::InitAsDefaultInstance() {
}

SWGEmuCharacterStructureItem::SWGEmuCharacterStructureItem(const SWGEmuCharacterStructureItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWGEmuCharacterStructureItem::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWGEmuCharacterStructureItem::~SWGEmuCharacterStructureItem() {
  SharedDtor();
}

void SWGEmuCharacterStructureItem::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (this != default_instance_) {
  }
}

void SWGEmuCharacterStructureItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWGEmuCharacterStructureItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuCharacterStructureItem_descriptor_;
}

const SWGEmuCharacterStructureItem& SWGEmuCharacterStructureItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharacterDetails_2eproto();
  return *default_instance_;
}

SWGEmuCharacterStructureItem* SWGEmuCharacterStructureItem::default_instance_ = NULL;

SWGEmuCharacterStructureItem* SWGEmuCharacterStructureItem::New() const {
  return new SWGEmuCharacterStructureItem;
}

void SWGEmuCharacterStructureItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWGEmuCharacterStructureItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_name;
        break;
      }

      // required string object_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required string display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWGEmuCharacterStructureItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // required string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_name(), output);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWGEmuCharacterStructureItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // required string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_name(), target);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWGEmuCharacterStructureItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // required string object_name = 2;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }

    // required string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWGEmuCharacterStructureItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWGEmuCharacterStructureItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWGEmuCharacterStructureItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWGEmuCharacterStructureItem::MergeFrom(const SWGEmuCharacterStructureItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWGEmuCharacterStructureItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWGEmuCharacterStructureItem::CopyFrom(const SWGEmuCharacterStructureItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWGEmuCharacterStructureItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SWGEmuCharacterStructureItem::Swap(SWGEmuCharacterStructureItem* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(object_name_, other->object_name_);
    std::swap(display_name_, other->display_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWGEmuCharacterStructureItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWGEmuCharacterStructureItem_descriptor_;
  metadata.reflection = SWGEmuCharacterStructureItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCharacterDetailsRequest::kAccountIdFieldNumber;
const int GetCharacterDetailsRequest::kObjectIdFieldNumber;
const int GetCharacterDetailsRequest::kGalaxyIdFieldNumber;
const int GetCharacterDetailsRequest::kFirstNameFieldNumber;
const int GetCharacterDetailsRequest::kSurNameFieldNumber;
const int GetCharacterDetailsRequest::kGalaxyNameFieldNumber;
#endif  // !_MSC_VER

GetCharacterDetailsRequest::GetCharacterDetailsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCharacterDetailsRequest::InitAsDefaultInstance() {
}

GetCharacterDetailsRequest::GetCharacterDetailsRequest(const GetCharacterDetailsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCharacterDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  galaxy_id_ = 0u;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sur_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  galaxy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCharacterDetailsRequest::~GetCharacterDetailsRequest() {
  SharedDtor();
}

void GetCharacterDetailsRequest::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sur_name_;
  }
  if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete galaxy_name_;
  }
  if (this != default_instance_) {
  }
}

void GetCharacterDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCharacterDetailsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCharacterDetailsRequest_descriptor_;
}

const GetCharacterDetailsRequest& GetCharacterDetailsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharacterDetails_2eproto();
  return *default_instance_;
}

GetCharacterDetailsRequest* GetCharacterDetailsRequest::default_instance_ = NULL;

GetCharacterDetailsRequest* GetCharacterDetailsRequest::New() const {
  return new GetCharacterDetailsRequest;
}

void GetCharacterDetailsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    object_id_ = GOOGLE_ULONGLONG(0);
    galaxy_id_ = 0u;
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_sur_name()) {
      if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
        sur_name_->clear();
      }
    }
    if (has_galaxy_name()) {
      if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
        galaxy_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCharacterDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_object_id;
        break;
      }

      // optional fixed64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_galaxy_id;
        break;
      }

      // optional fixed32 galaxy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_galaxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &galaxy_id_)));
          set_has_galaxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_first_name;
        break;
      }

      // optional string first_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sur_name;
        break;
      }

      // optional string sur_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sur_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sur_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sur_name().data(), this->sur_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_galaxy_name;
        break;
      }

      // optional string galaxy_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_galaxy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_galaxy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->galaxy_name().data(), this->galaxy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCharacterDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->account_id(), output);
  }

  // optional fixed64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->object_id(), output);
  }

  // optional fixed32 galaxy_id = 3;
  if (has_galaxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->galaxy_id(), output);
  }

  // optional string first_name = 7;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->first_name(), output);
  }

  // optional string sur_name = 8;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sur_name(), output);
  }

  // optional string galaxy_name = 9;
  if (has_galaxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->galaxy_name().data(), this->galaxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->galaxy_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCharacterDetailsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->account_id(), target);
  }

  // optional fixed64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->object_id(), target);
  }

  // optional fixed32 galaxy_id = 3;
  if (has_galaxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->galaxy_id(), target);
  }

  // optional string first_name = 7;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->first_name(), target);
  }

  // optional string sur_name = 8;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sur_name(), target);
  }

  // optional string galaxy_name = 9;
  if (has_galaxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->galaxy_name().data(), this->galaxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->galaxy_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCharacterDetailsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 galaxy_id = 3;
    if (has_galaxy_id()) {
      total_size += 1 + 4;
    }

    // optional string first_name = 7;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // optional string sur_name = 8;
    if (has_sur_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sur_name());
    }

    // optional string galaxy_name = 9;
    if (has_galaxy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->galaxy_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCharacterDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCharacterDetailsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCharacterDetailsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCharacterDetailsRequest::MergeFrom(const GetCharacterDetailsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_galaxy_id()) {
      set_galaxy_id(from.galaxy_id());
    }
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_sur_name()) {
      set_sur_name(from.sur_name());
    }
    if (from.has_galaxy_name()) {
      set_galaxy_name(from.galaxy_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCharacterDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCharacterDetailsRequest::CopyFrom(const GetCharacterDetailsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCharacterDetailsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCharacterDetailsRequest::Swap(GetCharacterDetailsRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(galaxy_id_, other->galaxy_id_);
    std::swap(first_name_, other->first_name_);
    std::swap(sur_name_, other->sur_name_);
    std::swap(galaxy_name_, other->galaxy_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCharacterDetailsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCharacterDetailsRequest_descriptor_;
  metadata.reflection = GetCharacterDetailsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCharacterDetailsResponse::kCharacterDetailsFieldNumber;
#endif  // !_MSC_VER

GetCharacterDetailsResponse::GetCharacterDetailsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCharacterDetailsResponse::InitAsDefaultInstance() {
}

GetCharacterDetailsResponse::GetCharacterDetailsResponse(const GetCharacterDetailsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCharacterDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCharacterDetailsResponse::~GetCharacterDetailsResponse() {
  SharedDtor();
}

void GetCharacterDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCharacterDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCharacterDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCharacterDetailsResponse_descriptor_;
}

const GetCharacterDetailsResponse& GetCharacterDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharacterDetails_2eproto();
  return *default_instance_;
}

GetCharacterDetailsResponse* GetCharacterDetailsResponse::default_instance_ = NULL;

GetCharacterDetailsResponse* GetCharacterDetailsResponse::New() const {
  return new GetCharacterDetailsResponse;
}

void GetCharacterDetailsResponse::Clear() {
  character_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCharacterDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swgemurpcserver.rpc.SWGEmuCharacterDetail character_details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_character_details;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCharacterDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .swgemurpcserver.rpc.SWGEmuCharacterDetail character_details = 1;
  for (int i = 0; i < this->character_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->character_details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCharacterDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .swgemurpcserver.rpc.SWGEmuCharacterDetail character_details = 1;
  for (int i = 0; i < this->character_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->character_details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCharacterDetailsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .swgemurpcserver.rpc.SWGEmuCharacterDetail character_details = 1;
  total_size += 1 * this->character_details_size();
  for (int i = 0; i < this->character_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCharacterDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCharacterDetailsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCharacterDetailsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCharacterDetailsResponse::MergeFrom(const GetCharacterDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  character_details_.MergeFrom(from.character_details_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCharacterDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCharacterDetailsResponse::CopyFrom(const GetCharacterDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCharacterDetailsResponse::IsInitialized() const {

  for (int i = 0; i < character_details_size(); i++) {
    if (!this->character_details(i).IsInitialized()) return false;
  }
  return true;
}

void GetCharacterDetailsResponse::Swap(GetCharacterDetailsResponse* other) {
  if (other != this) {
    character_details_.Swap(&other->character_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCharacterDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCharacterDetailsResponse_descriptor_;
  metadata.reflection = GetCharacterDetailsResponse_reflection_;
  return metadata;
}


// ===================================================================

SWGEmuCharacterDetailsService::~SWGEmuCharacterDetailsService() {}

const ::google::protobuf::ServiceDescriptor* SWGEmuCharacterDetailsService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuCharacterDetailsService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SWGEmuCharacterDetailsService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuCharacterDetailsService_descriptor_;
}

void SWGEmuCharacterDetailsService::GetCharacterDetails(::google::protobuf::RpcController* controller,
                         const ::swgemurpcserver::rpc::GetCharacterDetailsRequest*,
                         ::swgemurpcserver::rpc::GetCharacterDetailsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCharacterDetails() not implemented.");
  done->Run();
}

void SWGEmuCharacterDetailsService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SWGEmuCharacterDetailsService_descriptor_);
  switch(method->index()) {
    case 0:
      GetCharacterDetails(controller,
             ::google::protobuf::down_cast<const ::swgemurpcserver::rpc::GetCharacterDetailsRequest*>(request),
             ::google::protobuf::down_cast< ::swgemurpcserver::rpc::GetCharacterDetailsResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SWGEmuCharacterDetailsService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetCharacterDetailsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SWGEmuCharacterDetailsService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetCharacterDetailsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SWGEmuCharacterDetailsService_Stub::SWGEmuCharacterDetailsService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SWGEmuCharacterDetailsService_Stub::SWGEmuCharacterDetailsService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SWGEmuCharacterDetailsService_Stub::~SWGEmuCharacterDetailsService_Stub() {
  if (owns_channel_) delete channel_;
}

void SWGEmuCharacterDetailsService_Stub::GetCharacterDetails(::google::protobuf::RpcController* controller,
                              const ::swgemurpcserver::rpc::GetCharacterDetailsRequest* request,
                              ::swgemurpcserver::rpc::GetCharacterDetailsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace swgemurpcserver

// @@protoc_insertion_point(global_scope)
