// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AccountRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swgemurpcserver {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* GetAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetAccountRequest_SearchType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SWGEmuAccountCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWGEmuAccountCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWGEmuAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWGEmuAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SWGEmuAccountService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AccountRequest_2eproto() {
  protobuf_AddDesc_AccountRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AccountRequest.proto");
  GOOGLE_CHECK(file != NULL);
  GetAccountRequest_descriptor_ = file->message_type(0);
  static const int GetAccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, account_id_),
  };
  GetAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountRequest_descriptor_,
      GetAccountRequest::default_instance_,
      GetAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountRequest));
  GetAccountRequest_SearchType_descriptor_ = GetAccountRequest_descriptor_->enum_type(0);
  SWGEmuAccountCharacter_descriptor_ = file->message_type(1);
  static const int SWGEmuAccountCharacter_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, galaxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, sur_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, galaxy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, ban_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, ban_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, inventory_),
  };
  SWGEmuAccountCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWGEmuAccountCharacter_descriptor_,
      SWGEmuAccountCharacter::default_instance_,
      SWGEmuAccountCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccountCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWGEmuAccountCharacter));
  SWGEmuAccount_descriptor_ = file->message_type(2);
  static const int SWGEmuAccount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, admin_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, characters_),
  };
  SWGEmuAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWGEmuAccount_descriptor_,
      SWGEmuAccount::default_instance_,
      SWGEmuAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWGEmuAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWGEmuAccount));
  GetAccountResponse_descriptor_ = file->message_type(3);
  static const int GetAccountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, valid_password_),
  };
  GetAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountResponse_descriptor_,
      GetAccountResponse::default_instance_,
      GetAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountResponse));
  SWGEmuAccountService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AccountRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountRequest_descriptor_, &GetAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWGEmuAccountCharacter_descriptor_, &SWGEmuAccountCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWGEmuAccount_descriptor_, &SWGEmuAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountResponse_descriptor_, &GetAccountResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AccountRequest_2eproto() {
  delete GetAccountRequest::default_instance_;
  delete GetAccountRequest_reflection_;
  delete SWGEmuAccountCharacter::default_instance_;
  delete SWGEmuAccountCharacter_reflection_;
  delete SWGEmuAccount::default_instance_;
  delete SWGEmuAccount_reflection_;
  delete GetAccountResponse::default_instance_;
  delete GetAccountResponse_reflection_;
}

void protobuf_AddDesc_AccountRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AccountRequest.proto\022\023swgemurpcserver."
    "rpc\"\302\001\n\021GetAccountRequest\022F\n\013search_type"
    "\030\001 \002(\01621.swgemurpcserver.rpc.GetAccountR"
    "equest.SearchType\022\021\n\tuser_name\030\002 \001(\t\022\020\n\010"
    "password\030\003 \001(\t\022\022\n\naccount_id\030\004 \001(\007\",\n\nSe"
    "archType\022\r\n\tACCOUNTID\020\000\022\017\n\013ACCOUNTNAME\020\001"
    "\"\226\002\n\026SWGEmuAccountCharacter\022\021\n\tobject_id"
    "\030\001 \002(\006\022\022\n\naccount_id\030\002 \002(\007\022\021\n\tgalaxy_id\030"
    "\003 \002(\007\022\023\n\013create_time\030\004 \002(\006\022\016\n\006gender\030\005 \002"
    "(\007\022\014\n\004race\030\006 \002(\007\022\022\n\nfirst_name\030\007 \002(\t\022\020\n\010"
    "sur_name\030\010 \002(\t\022\023\n\013galaxy_name\030\t \002(\t\022\025\n\006b"
    "anned\030\n \001(\010:\005false\022\026\n\016ban_expiration\030\013 \001"
    "(\007\022\022\n\nban_reason\030\014 \001(\t\022\021\n\tinventory\030\r \001("
    "\t\"\262\001\n\rSWGEmuAccount\022\022\n\naccount_id\030\001 \002(\007\022"
    "\021\n\tuser_name\030\002 \002(\t\022\016\n\006active\030\003 \002(\010\022\024\n\014cr"
    "eated_time\030\004 \002(\007\022\023\n\013admin_level\030\005 \001(\007\022\?\n"
    "\ncharacters\030\n \003(\0132+.swgemurpcserver.rpc."
    "SWGEmuAccountCharacter\"b\n\022GetAccountResp"
    "onse\0224\n\010accounts\030\001 \003(\0132\".swgemurpcserver"
    ".rpc.SWGEmuAccount\022\026\n\016valid_password\030\002 \001"
    "(\0102u\n\024SWGEmuAccountService\022]\n\nGetAccount"
    "\022&.swgemurpcserver.rpc.GetAccountRequest"
    "\032\'.swgemurpcserver.rpc.GetAccountRespons"
    "eB\003\200\001\001", 926);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AccountRequest.proto", &protobuf_RegisterTypes);
  GetAccountRequest::default_instance_ = new GetAccountRequest();
  SWGEmuAccountCharacter::default_instance_ = new SWGEmuAccountCharacter();
  SWGEmuAccount::default_instance_ = new SWGEmuAccount();
  GetAccountResponse::default_instance_ = new GetAccountResponse();
  GetAccountRequest::default_instance_->InitAsDefaultInstance();
  SWGEmuAccountCharacter::default_instance_->InitAsDefaultInstance();
  SWGEmuAccount::default_instance_->InitAsDefaultInstance();
  GetAccountResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AccountRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AccountRequest_2eproto {
  StaticDescriptorInitializer_AccountRequest_2eproto() {
    protobuf_AddDesc_AccountRequest_2eproto();
  }
} static_descriptor_initializer_AccountRequest_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GetAccountRequest_SearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountRequest_SearchType_descriptor_;
}
bool GetAccountRequest_SearchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetAccountRequest_SearchType GetAccountRequest::ACCOUNTID;
const GetAccountRequest_SearchType GetAccountRequest::ACCOUNTNAME;
const GetAccountRequest_SearchType GetAccountRequest::SearchType_MIN;
const GetAccountRequest_SearchType GetAccountRequest::SearchType_MAX;
const int GetAccountRequest::SearchType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetAccountRequest::kSearchTypeFieldNumber;
const int GetAccountRequest::kUserNameFieldNumber;
const int GetAccountRequest::kPasswordFieldNumber;
const int GetAccountRequest::kAccountIdFieldNumber;
#endif  // !_MSC_VER

GetAccountRequest::GetAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountRequest::InitAsDefaultInstance() {
}

GetAccountRequest::GetAccountRequest(const GetAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  search_type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountRequest::~GetAccountRequest() {
  SharedDtor();
}

void GetAccountRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GetAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountRequest_descriptor_;
}

const GetAccountRequest& GetAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountRequest_2eproto();
  return *default_instance_;
}

GetAccountRequest* GetAccountRequest::default_instance_ = NULL;

GetAccountRequest* GetAccountRequest::New() const {
  return new GetAccountRequest;
}

void GetAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    search_type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::swgemurpcserver::rpc::GetAccountRequest_SearchType_IsValid(value)) {
            set_search_type(static_cast< ::swgemurpcserver::rpc::GetAccountRequest_SearchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_account_id;
        break;
      }

      // optional fixed32 account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->search_type(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional fixed32 account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->search_type(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional fixed32 account_id = 4;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .swgemurpcserver.rpc.GetAccountRequest.SearchType search_type = 1;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_type());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional fixed32 account_id = 4;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountRequest::MergeFrom(const GetAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountRequest::CopyFrom(const GetAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAccountRequest::Swap(GetAccountRequest* other) {
  if (other != this) {
    std::swap(search_type_, other->search_type_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(account_id_, other->account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountRequest_descriptor_;
  metadata.reflection = GetAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWGEmuAccountCharacter::kObjectIdFieldNumber;
const int SWGEmuAccountCharacter::kAccountIdFieldNumber;
const int SWGEmuAccountCharacter::kGalaxyIdFieldNumber;
const int SWGEmuAccountCharacter::kCreateTimeFieldNumber;
const int SWGEmuAccountCharacter::kGenderFieldNumber;
const int SWGEmuAccountCharacter::kRaceFieldNumber;
const int SWGEmuAccountCharacter::kFirstNameFieldNumber;
const int SWGEmuAccountCharacter::kSurNameFieldNumber;
const int SWGEmuAccountCharacter::kGalaxyNameFieldNumber;
const int SWGEmuAccountCharacter::kBannedFieldNumber;
const int SWGEmuAccountCharacter::kBanExpirationFieldNumber;
const int SWGEmuAccountCharacter::kBanReasonFieldNumber;
const int SWGEmuAccountCharacter::kInventoryFieldNumber;
#endif  // !_MSC_VER

SWGEmuAccountCharacter::SWGEmuAccountCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWGEmuAccountCharacter::InitAsDefaultInstance() {
}

SWGEmuAccountCharacter::SWGEmuAccountCharacter(const SWGEmuAccountCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWGEmuAccountCharacter::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  account_id_ = 0u;
  galaxy_id_ = 0u;
  create_time_ = GOOGLE_ULONGLONG(0);
  gender_ = 0u;
  race_ = 0u;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sur_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  galaxy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  banned_ = false;
  ban_expiration_ = 0u;
  ban_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inventory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWGEmuAccountCharacter::~SWGEmuAccountCharacter() {
  SharedDtor();
}

void SWGEmuAccountCharacter::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sur_name_;
  }
  if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete galaxy_name_;
  }
  if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete ban_reason_;
  }
  if (inventory_ != &::google::protobuf::internal::kEmptyString) {
    delete inventory_;
  }
  if (this != default_instance_) {
  }
}

void SWGEmuAccountCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWGEmuAccountCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuAccountCharacter_descriptor_;
}

const SWGEmuAccountCharacter& SWGEmuAccountCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountRequest_2eproto();
  return *default_instance_;
}

SWGEmuAccountCharacter* SWGEmuAccountCharacter::default_instance_ = NULL;

SWGEmuAccountCharacter* SWGEmuAccountCharacter::New() const {
  return new SWGEmuAccountCharacter;
}

void SWGEmuAccountCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    account_id_ = 0u;
    galaxy_id_ = 0u;
    create_time_ = GOOGLE_ULONGLONG(0);
    gender_ = 0u;
    race_ = 0u;
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_sur_name()) {
      if (sur_name_ != &::google::protobuf::internal::kEmptyString) {
        sur_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_galaxy_name()) {
      if (galaxy_name_ != &::google::protobuf::internal::kEmptyString) {
        galaxy_name_->clear();
      }
    }
    banned_ = false;
    ban_expiration_ = 0u;
    if (has_ban_reason()) {
      if (ban_reason_ != &::google::protobuf::internal::kEmptyString) {
        ban_reason_->clear();
      }
    }
    if (has_inventory()) {
      if (inventory_ != &::google::protobuf::internal::kEmptyString) {
        inventory_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWGEmuAccountCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_account_id;
        break;
      }

      // required fixed32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_galaxy_id;
        break;
      }

      // required fixed32 galaxy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_galaxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &galaxy_id_)));
          set_has_galaxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_create_time;
        break;
      }

      // required fixed64 create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gender;
        break;
      }

      // required fixed32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_race;
        break;
      }

      // required fixed32 race = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_first_name;
        break;
      }

      // required string first_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sur_name;
        break;
      }

      // required string sur_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sur_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sur_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sur_name().data(), this->sur_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_galaxy_name;
        break;
      }

      // required string galaxy_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_galaxy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_galaxy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->galaxy_name().data(), this->galaxy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_banned;
        break;
      }

      // optional bool banned = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
          set_has_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ban_expiration;
        break;
      }

      // optional fixed32 ban_expiration = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ban_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ban_expiration_)));
          set_has_ban_expiration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ban_reason;
        break;
      }

      // optional string ban_reason = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ban_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ban_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ban_reason().data(), this->ban_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_inventory;
        break;
      }

      // optional string inventory = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inventory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inventory().data(), this->inventory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWGEmuAccountCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->object_id(), output);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->account_id(), output);
  }

  // required fixed32 galaxy_id = 3;
  if (has_galaxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->galaxy_id(), output);
  }

  // required fixed64 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->create_time(), output);
  }

  // required fixed32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->gender(), output);
  }

  // required fixed32 race = 6;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->race(), output);
  }

  // required string first_name = 7;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->first_name(), output);
  }

  // required string sur_name = 8;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sur_name(), output);
  }

  // required string galaxy_name = 9;
  if (has_galaxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->galaxy_name().data(), this->galaxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->galaxy_name(), output);
  }

  // optional bool banned = 10 [default = false];
  if (has_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->banned(), output);
  }

  // optional fixed32 ban_expiration = 11;
  if (has_ban_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->ban_expiration(), output);
  }

  // optional string ban_reason = 12;
  if (has_ban_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ban_reason(), output);
  }

  // optional string inventory = 13;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inventory().data(), this->inventory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->inventory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWGEmuAccountCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->object_id(), target);
  }

  // required fixed32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->account_id(), target);
  }

  // required fixed32 galaxy_id = 3;
  if (has_galaxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->galaxy_id(), target);
  }

  // required fixed64 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->create_time(), target);
  }

  // required fixed32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->gender(), target);
  }

  // required fixed32 race = 6;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->race(), target);
  }

  // required string first_name = 7;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->first_name(), target);
  }

  // required string sur_name = 8;
  if (has_sur_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sur_name().data(), this->sur_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sur_name(), target);
  }

  // required string galaxy_name = 9;
  if (has_galaxy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->galaxy_name().data(), this->galaxy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->galaxy_name(), target);
  }

  // optional bool banned = 10 [default = false];
  if (has_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->banned(), target);
  }

  // optional fixed32 ban_expiration = 11;
  if (has_ban_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->ban_expiration(), target);
  }

  // optional string ban_reason = 12;
  if (has_ban_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ban_reason(), target);
  }

  // optional string inventory = 13;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inventory().data(), this->inventory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->inventory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWGEmuAccountCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 + 8;
    }

    // required fixed32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 galaxy_id = 3;
    if (has_galaxy_id()) {
      total_size += 1 + 4;
    }

    // required fixed64 create_time = 4;
    if (has_create_time()) {
      total_size += 1 + 8;
    }

    // required fixed32 gender = 5;
    if (has_gender()) {
      total_size += 1 + 4;
    }

    // required fixed32 race = 6;
    if (has_race()) {
      total_size += 1 + 4;
    }

    // required string first_name = 7;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // required string sur_name = 8;
    if (has_sur_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sur_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string galaxy_name = 9;
    if (has_galaxy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->galaxy_name());
    }

    // optional bool banned = 10 [default = false];
    if (has_banned()) {
      total_size += 1 + 1;
    }

    // optional fixed32 ban_expiration = 11;
    if (has_ban_expiration()) {
      total_size += 1 + 4;
    }

    // optional string ban_reason = 12;
    if (has_ban_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ban_reason());
    }

    // optional string inventory = 13;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inventory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWGEmuAccountCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWGEmuAccountCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWGEmuAccountCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWGEmuAccountCharacter::MergeFrom(const SWGEmuAccountCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_galaxy_id()) {
      set_galaxy_id(from.galaxy_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_sur_name()) {
      set_sur_name(from.sur_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_galaxy_name()) {
      set_galaxy_name(from.galaxy_name());
    }
    if (from.has_banned()) {
      set_banned(from.banned());
    }
    if (from.has_ban_expiration()) {
      set_ban_expiration(from.ban_expiration());
    }
    if (from.has_ban_reason()) {
      set_ban_reason(from.ban_reason());
    }
    if (from.has_inventory()) {
      set_inventory(from.inventory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWGEmuAccountCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWGEmuAccountCharacter::CopyFrom(const SWGEmuAccountCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWGEmuAccountCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void SWGEmuAccountCharacter::Swap(SWGEmuAccountCharacter* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(galaxy_id_, other->galaxy_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(gender_, other->gender_);
    std::swap(race_, other->race_);
    std::swap(first_name_, other->first_name_);
    std::swap(sur_name_, other->sur_name_);
    std::swap(galaxy_name_, other->galaxy_name_);
    std::swap(banned_, other->banned_);
    std::swap(ban_expiration_, other->ban_expiration_);
    std::swap(ban_reason_, other->ban_reason_);
    std::swap(inventory_, other->inventory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWGEmuAccountCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWGEmuAccountCharacter_descriptor_;
  metadata.reflection = SWGEmuAccountCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWGEmuAccount::kAccountIdFieldNumber;
const int SWGEmuAccount::kUserNameFieldNumber;
const int SWGEmuAccount::kActiveFieldNumber;
const int SWGEmuAccount::kCreatedTimeFieldNumber;
const int SWGEmuAccount::kAdminLevelFieldNumber;
const int SWGEmuAccount::kCharactersFieldNumber;
#endif  // !_MSC_VER

SWGEmuAccount::SWGEmuAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWGEmuAccount::InitAsDefaultInstance() {
}

SWGEmuAccount::SWGEmuAccount(const SWGEmuAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWGEmuAccount::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  created_time_ = 0u;
  admin_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWGEmuAccount::~SWGEmuAccount() {
  SharedDtor();
}

void SWGEmuAccount::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void SWGEmuAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWGEmuAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuAccount_descriptor_;
}

const SWGEmuAccount& SWGEmuAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountRequest_2eproto();
  return *default_instance_;
}

SWGEmuAccount* SWGEmuAccount::default_instance_ = NULL;

SWGEmuAccount* SWGEmuAccount::New() const {
  return new SWGEmuAccount;
}

void SWGEmuAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    active_ = false;
    created_time_ = 0u;
    admin_level_ = 0u;
  }
  characters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWGEmuAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // required bool active = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_created_time;
        break;
      }

      // required fixed32 created_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_admin_level;
        break;
      }

      // optional fixed32 admin_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_admin_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &admin_level_)));
          set_has_admin_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_characters;
        break;
      }

      // repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_characters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWGEmuAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->account_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // required bool active = 3;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // required fixed32 created_time = 4;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->created_time(), output);
  }

  // optional fixed32 admin_level = 5;
  if (has_admin_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->admin_level(), output);
  }

  // repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
  for (int i = 0; i < this->characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->characters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWGEmuAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->account_id(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required bool active = 3;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // required fixed32 created_time = 4;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->created_time(), target);
  }

  // optional fixed32 admin_level = 5;
  if (has_admin_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->admin_level(), target);
  }

  // repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
  for (int i = 0; i < this->characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->characters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWGEmuAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 + 4;
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required bool active = 3;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required fixed32 created_time = 4;
    if (has_created_time()) {
      total_size += 1 + 4;
    }

    // optional fixed32 admin_level = 5;
    if (has_admin_level()) {
      total_size += 1 + 4;
    }

  }
  // repeated .swgemurpcserver.rpc.SWGEmuAccountCharacter characters = 10;
  total_size += 1 * this->characters_size();
  for (int i = 0; i < this->characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWGEmuAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWGEmuAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWGEmuAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWGEmuAccount::MergeFrom(const SWGEmuAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_.MergeFrom(from.characters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_admin_level()) {
      set_admin_level(from.admin_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWGEmuAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWGEmuAccount::CopyFrom(const SWGEmuAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWGEmuAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < characters_size(); i++) {
    if (!this->characters(i).IsInitialized()) return false;
  }
  return true;
}

void SWGEmuAccount::Swap(SWGEmuAccount* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(active_, other->active_);
    std::swap(created_time_, other->created_time_);
    std::swap(admin_level_, other->admin_level_);
    characters_.Swap(&other->characters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWGEmuAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWGEmuAccount_descriptor_;
  metadata.reflection = SWGEmuAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccountResponse::kAccountsFieldNumber;
const int GetAccountResponse::kValidPasswordFieldNumber;
#endif  // !_MSC_VER

GetAccountResponse::GetAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAccountResponse::InitAsDefaultInstance() {
}

GetAccountResponse::GetAccountResponse(const GetAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  valid_password_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountResponse::~GetAccountResponse() {
  SharedDtor();
}

void GetAccountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountResponse_descriptor_;
}

const GetAccountResponse& GetAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AccountRequest_2eproto();
  return *default_instance_;
}

GetAccountResponse* GetAccountResponse::default_instance_ = NULL;

GetAccountResponse* GetAccountResponse::New() const {
  return new GetAccountResponse;
}

void GetAccountResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    valid_password_ = false;
  }
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accounts;
        if (input->ExpectTag(16)) goto parse_valid_password;
        break;
      }

      // optional bool valid_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_password_)));
          set_has_valid_password();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(i), output);
  }

  // optional bool valid_password = 2;
  if (has_valid_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accounts(i), target);
  }

  // optional bool valid_password = 2;
  if (has_valid_password()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool valid_password = 2;
    if (has_valid_password()) {
      total_size += 1 + 1;
    }

  }
  // repeated .swgemurpcserver.rpc.SWGEmuAccount accounts = 1;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountResponse::MergeFrom(const GetAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  accounts_.MergeFrom(from.accounts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_valid_password()) {
      set_valid_password(from.valid_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountResponse::CopyFrom(const GetAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountResponse::IsInitialized() const {

  for (int i = 0; i < accounts_size(); i++) {
    if (!this->accounts(i).IsInitialized()) return false;
  }
  return true;
}

void GetAccountResponse::Swap(GetAccountResponse* other) {
  if (other != this) {
    accounts_.Swap(&other->accounts_);
    std::swap(valid_password_, other->valid_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccountResponse_descriptor_;
  metadata.reflection = GetAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

SWGEmuAccountService::~SWGEmuAccountService() {}

const ::google::protobuf::ServiceDescriptor* SWGEmuAccountService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuAccountService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SWGEmuAccountService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWGEmuAccountService_descriptor_;
}

void SWGEmuAccountService::GetAccount(::google::protobuf::RpcController* controller,
                         const ::swgemurpcserver::rpc::GetAccountRequest*,
                         ::swgemurpcserver::rpc::GetAccountResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAccount() not implemented.");
  done->Run();
}

void SWGEmuAccountService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SWGEmuAccountService_descriptor_);
  switch(method->index()) {
    case 0:
      GetAccount(controller,
             ::google::protobuf::down_cast<const ::swgemurpcserver::rpc::GetAccountRequest*>(request),
             ::google::protobuf::down_cast< ::swgemurpcserver::rpc::GetAccountResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SWGEmuAccountService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetAccountRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SWGEmuAccountService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::swgemurpcserver::rpc::GetAccountResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SWGEmuAccountService_Stub::SWGEmuAccountService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SWGEmuAccountService_Stub::SWGEmuAccountService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SWGEmuAccountService_Stub::~SWGEmuAccountService_Stub() {
  if (owns_channel_) delete channel_;
}

void SWGEmuAccountService_Stub::GetAccount(::google::protobuf::RpcController* controller,
                              const ::swgemurpcserver::rpc::GetAccountRequest* request,
                              ::swgemurpcserver::rpc::GetAccountResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace swgemurpcserver

// @@protoc_insertion_point(global_scope)
